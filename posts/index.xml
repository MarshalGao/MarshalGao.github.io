<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on This is Marshal</title>
        <link>https://www.marshalgao.com/posts/</link>
        <description>Recent content in Posts on This is Marshal</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://www.hku.hk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The University of Hong Kong&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 26 Oct 2020 16:26:43 +0800</lastBuildDate>
        <atom:link href="https://www.marshalgao.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>互联网金融安全JD汇总(Tencent)</title>
            <link>https://www.marshalgao.com/%E4%BA%92%E8%81%94%E7%BD%91%E9%87%91%E8%9E%8D%E5%AE%89%E5%85%A8jd%E6%B1%87%E6%80%BBtencent/</link>
            <pubDate>Mon, 26 Oct 2020 16:26:43 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/%E4%BA%92%E8%81%94%E7%BD%91%E9%87%91%E8%9E%8D%E5%AE%89%E5%85%A8jd%E6%B1%87%E6%80%BBtencent/</guid>
            <description>金融科技项目经理  工作职责  负责财付通金融支付业务的风控管理项目跟进工作，包括主要里程碑达成，任务执行进展，日常团队沟通工作等 负责反洗钱及风控各类需求的项目计划的制定、跟踪和维护，确保项目按照计划交付 负责落地执行各业务流程，做好项目管理类流程的团队适配，组织项目各项评审会议及项目例会 整理各类项目报告，确保项目有序推进，信息透明   工作要求  本科及以上学历，5年以上项目管理经验 从事过安全类/支付类/金融类业务经验者优先 具备较强的团队合作，沟通能力和协作意识，抗压能力强 具备较强的逻辑分析能力，有独立负责项目管理的经验 具备一定的数据分析基础，具有良好沟通能力 有相关项目管理资格认证者优先    腾讯云安全高级产品经理  工作职责  负责金融行业，包括银行、证券、保险、信托、消金、互金等一个或多个方向的金融风控产品、解决方案的输出 为腾讯云金融行业安全风控服务的商业收入负责，支持一线商务经理、架构师达成商业化目标 关注金融风控、金融科技行业生态变化，对金融机构业务链路熟悉。能基于对行业和产品的理解判断，提出符合行业需求的创新性解决方案，并推动内外部资源整合和方案的落地复制   工作要求  本科及以上学历，3年以上相关工作经验 金融行业及风控风向从业者优先，有银行从业背景者优先 有灵敏市场嗅觉及行业经验，具备优秀的信息整合、逻辑组织和观点提炼的能力，能高效推动目标达成 对互联网富有热情，责任感强，有良好的沟通协调能力、团队合作精神及开放的心态    流量风控产品经理  工作职责  负责反欺诈产品设计包括不限于：账号安全保护、营销活动保护、推广裂变保护、渠道质量风控等 负责设计设备指纹+决策引擎搭配的风控平台产品，为腾讯云租户构建云上业务安全平台 探索反欺诈产品和各个行业的解决方案，包括但不限于：航旅、电商、零售、运营商等 负责客户线上风控系统咨询工作   工作要求  本科以上学历，数学，统计学，计算机、金融等相关专业 对黑产作弊手段熟悉，如电商羊毛、黄牛、线上黑产批量注册、撞库-洗库等 对业务安全有成熟的方法论，有黑产对抗攻防经验是加分项 有商业化产品经验是加分项 具备较强的自我学习能力，有清晰逻辑思维，敏锐洞察力，良好的分析和解决问题能力，沟通协调能力    </description>
            <content type="html"><![CDATA[<h4 id="金融科技项目经理">金融科技项目经理</h4>
<ul>
<li>工作职责
<ul>
<li>负责财付通金融支付业务的风控管理项目跟进工作，包括主要里程碑达成，任务执行进展，日常团队沟通工作等</li>
<li>负责反洗钱及风控各类需求的项目计划的制定、跟踪和维护，确保项目按照计划交付</li>
<li>负责落地执行各业务流程，做好项目管理类流程的团队适配，组织项目各项评审会议及项目例会</li>
<li>整理各类项目报告，确保项目有序推进，信息透明</li>
</ul>
</li>
<li>工作要求
<ul>
<li>本科及以上学历，5年以上项目管理经验</li>
<li>从事过安全类/支付类/金融类业务经验者优先</li>
<li>具备较强的团队合作，沟通能力和协作意识，抗压能力强</li>
<li>具备较强的逻辑分析能力，有独立负责项目管理的经验</li>
<li>具备一定的数据分析基础，具有良好沟通能力</li>
<li>有相关项目管理资格认证者优先</li>
</ul>
</li>
</ul>
<h4 id="腾讯云安全高级产品经理">腾讯云安全高级产品经理</h4>
<ul>
<li>工作职责
<ul>
<li>负责金融行业，包括银行、证券、保险、信托、消金、互金等一个或多个方向的金融风控产品、解决方案的输出</li>
<li>为腾讯云金融行业安全风控服务的商业收入负责，支持一线商务经理、架构师达成商业化目标</li>
<li>关注金融风控、金融科技行业生态变化，对金融机构业务链路熟悉。能基于对行业和产品的理解判断，提出符合行业需求的创新性解决方案，并推动内外部资源整合和方案的落地复制</li>
</ul>
</li>
<li>工作要求
<ul>
<li>本科及以上学历，3年以上相关工作经验</li>
<li>金融行业及风控风向从业者优先，有银行从业背景者优先</li>
<li>有灵敏市场嗅觉及行业经验，具备优秀的信息整合、逻辑组织和观点提炼的能力，能高效推动目标达成</li>
<li>对互联网富有热情，责任感强，有良好的沟通协调能力、团队合作精神及开放的心态</li>
</ul>
</li>
</ul>
<h4 id="流量风控产品经理">流量风控产品经理</h4>
<ul>
<li>工作职责
<ul>
<li>负责反欺诈产品设计包括不限于：账号安全保护、营销活动保护、推广裂变保护、渠道质量风控等</li>
<li>负责设计设备指纹+决策引擎搭配的风控平台产品，为腾讯云租户构建云上业务安全平台</li>
<li>探索反欺诈产品和各个行业的解决方案，包括但不限于：航旅、电商、零售、运营商等</li>
<li>负责客户线上风控系统咨询工作</li>
</ul>
</li>
<li>工作要求
<ul>
<li>本科以上学历，数学，统计学，计算机、金融等相关专业</li>
<li>对黑产作弊手段熟悉，如电商羊毛、黄牛、线上黑产批量注册、撞库-洗库等</li>
<li>对业务安全有成熟的方法论，有黑产对抗攻防经验是加分项</li>
<li>有商业化产品经验是加分项</li>
<li>具备较强的自我学习能力，有清晰逻辑思维，敏锐洞察力，良好的分析和解决问题能力，沟通协调能力</li>
</ul>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>ICOM6012 Network Layer</title>
            <link>https://www.marshalgao.com/icom6012-network-layer/</link>
            <pubDate>Wed, 21 Oct 2020 21:29:33 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/icom6012-network-layer/</guid>
            <description>Overview Services and protocols
 transport segment from sending to receiving host network layer protocols in every Internet device, including hosts and routers IP provides best-effort services only two functions  forwarding (data plane): local action, move arriving packets from router&#39;s input link to appropriate router output link routing (control plane): global action, generated by routing algorithms and determine source-destination paths (end-to-end)  centralized (e.g. telephone network)  &amp;quot;emerging&amp;quot; approach under the context of Software-Defined Networking (SDN) routing is done by controller (a centralized server)  Q: Different routing algorithms can be easily used (why)?</description>
            <content type="html"><![CDATA[<p><figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/Network%20Layer1.png" alt=""></figure></p>

<h2 id="overview">Overview</h2>

<p><strong>Services and protocols</strong></p>

<ul>
<li>transport segment from sending to receiving host</li>
<li>network layer protocols in every Internet device, including hosts and routers</li>
<li>IP provides best-effort services only</li>
<li>two functions

<ul>
<li>forwarding (data plane): local action, move arriving packets from router's input link to appropriate router output link</li>
<li>routing (control plane): global action, generated by routing algorithms and determine source-destination paths (end-to-end)

<ul>
<li>centralized (e.g. telephone network)

<ul>
<li>&quot;emerging&quot; approach under the context of Software-Defined Networking (SDN)</li>
<li>routing is done by controller (a centralized server)

<ul>
<li><strong>Q: Different routing algorithms can be easily used (why)?</strong></li>
<li>A: Yes, the routing paths are determined by ourselves. This time I choose x path (the shortest way), the next time I can choose y path (the lowest delay way). Because routers do not collaborate.</li>
</ul></li>
<li>the controller determines the paths (based on various packet header fields), and configures the forwarding tables at routers</li>
<li>In SDN, routers are called &quot;openflow switches&quot;, because the routing function is done by the controller

<ul>
<li><strong>Q: Can we use this method in the whole network?</strong></li>
<li>A: It is impossible. This method can only be used in small network, such as campus network, enterprise network and datacenter network.</li>
</ul></li>
<li>should obey the Openflow Specification (standard)</li>
<li>routing can be designed by software (programming, you can control the routing path by yourself)</li>
</ul></li>
<li>distributed

<ul>
<li>routers collaborate with each other to find (shortest) paths (based on destination), and configure their own fowarding tables accordingly</li>
<li>self-healing</li>
<li>routing protocol is implemented inside routers</li>
<li>network operator lacks control of routing paths
<br></li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<h2 id="forwarding">Forwarding</h2>

<p><strong>What is inside a router</strong></p>

<ul>
<li>router architecture overview
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-21%20%E4%B8%8B%E5%8D%8810.59.37.png" alt=""></figure>

<ul>
<li>input port functions

<ul>
<li>decentralized switching (the red one)

<ul>
<li>given data dest, lookup out port using forwarding table in input port memory</li>
<li>goal: complete input port processing at &quot;line rate/speed&quot; (completely use the bandwidth, not want to become bottlenect)</li>
<li>queuing: if datagrams arrive faster than forwarding rate into switch fabric
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-22%20%E4%B8%8B%E5%8D%882.23.40.png" alt=""></figure></li>
</ul></li>
</ul></li>
<li>switching fabrics

<ul>
<li>memory: links have been generated</li>
<li>bus: just like broadcasting</li>
<li>crossbar: lost of buses, just like a small switch

<ul>
<li>configure some points connection or disconnection to make packets can be transmitted parallelly
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-22%20%E4%B8%8B%E5%8D%882.47.52.png" alt=""></figure></li>
</ul></li>
<li>some high-speed router combine different techniques together</li>
<li>switching rate: rate at which packets can be transferred

<ul>
<li>output-queued switch: switching rate = N times of line rate

<ul>
<li>allow N packets (R) come to one output port together</li>
<li>one packet come, output immediately (ideal), but expensive</li>
</ul></li>
<li>input-queued switch: switching rate = line rate

<ul>
<li>only allow single packet to one output port, others would wait (if buffer flow, tcp would help)</li>
<li>in practice, use this method
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-22%20%E4%B8%8B%E5%8D%883.06.18.png" alt=""></figure></li>
</ul></li>
</ul></li>
</ul></li>
<li>output ports

<ul>
<li>buffering required when datagrams arrive from fabric faster than the transmission rate</li>
<li>scheduling discipline chooses among queued datagrams for transmission
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-22%20%E4%B8%8B%E5%8D%887.44.59.png" alt=""></figure></li>
</ul></li>
</ul></li>
</ul>

<p><strong>IP: the Internet protocol</strong></p>

<ul>
<li>routing protocols and ICMP all rely on IP, so IP is the &quot;only&quot; standard in the network layer</li>
<li>datagram format

<ul>
<li>ver: 4 bits, e.g. IPv4, IPv6</li>
<li>header length: 4 bits, 4 bytes as a union (just like TCP), the minimum header size is 20 bytes</li>
<li>type of service: 8 bits, choose which type of service should be used, because the designer believe IP can do more than best-effort things (but majority people do not use this)</li>
<li>length: theoretically, maximum size of datagram is <span  class="math">\(2^{16}-1\)</span>

<ul>
<li>actually, smaller than that, due to frame has its limitation</li>
</ul></li>
<li>16-bit identifier: judge the packets belong to the same original message</li>
<li>flags: show the order of one packet, e.g. this packet is the last one of the original message</li>
<li>fragment offset: reassembly original message in order

<ul>
<li>many routers may not support fragmentation</li>
<li>try not to make the message be fragmented (in designer view)</li>
<li>IPv6 removes 16-bit identifier, flags and fragment offset

<ul>
<li>fragmentation would be done by host, not router</li>
</ul></li>
</ul></li>
<li>time to live: set by sending host, 255 (max, initially, due to 8 bits)

<ul>
<li>arrive at each router, minus 1, until 0, drop it</li>
<li>prevent looping</li>
</ul></li>
<li>upper layer: link the transport layer and network layer

<ul>
<li>6: TCP</li>
<li>17: UDP</li>
<li>89: OSPF</li>
</ul></li>
<li>header checksum: hop-by-hop (due to the value of time to live has changed) basis error detection, only calculate header (check before forwarding)

<ul>
<li>checksum of TCP and UDP are end-to-end basis, calculate all things
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-22%20%E4%B8%8B%E5%8D%889.07.11.png" alt=""></figure></li>
</ul></li>
</ul></li>
</ul>

<p><strong>IP addressing</strong></p>

<ul>
<li>IP address is associated with interface, not host

<ul>
<li>multiple interfaces mean multiple IP addresses</li>
<li>interface: connection between host/router and physical/wireless link

<ul>
<li>router has multiple interfaces, typically</li>
<li>host has one or two interfaces, typically (e.g. wired Ethernet, WiFi, Bluetooth)</li>
<li><strong>Q: How are interfaces actually connected?</strong></li>
<li>A: Ethernet switches, WiFi base station, etc.</li>
</ul></li>
</ul></li>
<li>subnet: a network inside a network

<ul>
<li>device interfaces can communicate with each other without routers</li>
<li>should have unique subnet address</li>
<li>each forwarding table entry corresponds to a subnet, or a range of addresses, to make forwarding table simple

<ul>
<li>forwarding table would be bottleneck, due to finding routes</li>
</ul></li>
</ul></li>
<li>structure

<ul>
<li>subnet part: high order bits (subnet mask)</li>
<li>host part: remaining low order bits

<ul>
<li>within a subnet, host address must be unique</li>
</ul></li>
</ul></li>
<li>old days: classful addressing
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-22%20%E4%B8%8B%E5%8D%889.36.37.png" alt=""></figure></li>
<li>CIDR (classless interdomain routing)

<ul>
<li>subnet portion of address of arbitrary length</li>
<li>address format: a.b.c.d/x, where x is number bits in subnet portion of address</li>
<li>specific (0.0.0.0 means you have no IP address)
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-22%20%E4%B8%8B%E5%8D%889.46.50.png" alt=""></figure></li>
</ul></li>
<li>how to get IP addresses

<ul>
<li>host part: DHCP (dynamic host configuration protocol)

<ul>
<li>DHCP server would be in the subnet (e.g. at home, WiFi router has a DHCP server), without configuration by user</li>
<li>overview (dora)

<ul>
<li>host broadcasts &quot;DHCP <strong>d</strong>iscover&quot; msg (optional, due to lease timeout, just jump to the last two steps)

<ul>
<li>broadcast</li>
<li>src: 0.0.0.0 68</li>
<li>dest: 255.255.255.255 67</li>
</ul></li>
<li>DHCP server responds with &quot;DHCP <strong>o</strong>ffer&quot; msg (optional, can be multiple, but only accept one)

<ul>
<li>broadcast</li>
<li>src: 223.1.2.5 67</li>
<li>dest: 255.255.255.255 68</li>
<li>lifetime: 3600s</li>
</ul></li>
<li>host requests IP address: &quot;DHCP <strong>r</strong>equest&quot; msg

<ul>
<li>broadcast (let other DHCP servers know you want to accept one offer, others would know their offers are not successful)</li>
<li>src: 0.0.0.0 68</li>
<li>dest: 255.255.255.255 67</li>
<li>lifetime: 3600s</li>
</ul></li>
<li>DHCP server sends address: &quot;DHCP <strong>a</strong>ck&quot; msg

<ul>
<li>broadcast</li>
<li>src: 223.1.2.5 67</li>
<li>dest: 255.255.255.255 68</li>
<li>lifetime: 3600s</li>
</ul></li>
</ul></li>
<li>other parts of DHCP

<ul>
<li>IP address of first-hop router</li>
<li>name and IP address of DNS server (e.g. dns.google.com -&gt; 8.8.8.8, due to collection of data, it is free)</li>
<li>subnet mask (indicating network versus host portion of address)

<ul>
<li>it can dertermine whether the packet transmission needs a router</li>
</ul></li>
</ul></li>
</ul></li>
<li>subnet part: from ISP/ICANN -&gt; public IP addresses (unique on the Internet)

<ul>
<li>but in setting up a new WiFi router, network part address -&gt; private IP addresses (unique on the home network, so your this IP address can be the same as the others)</li>
</ul></li>
</ul></li>

<li><p>NAT (network address translation)</p>

<ul>
<li>used in routers

<ul>
<li>use port number (should be unique, other processes can not use) to match with both sides</li>
</ul></li>
<li>translates a set of IP addresses to another set of IP addresses (using translation table)</li>
<li>help preserve the limited amount of IPv4 public IP addresses (with private IP addresses)

<ul>
<li>public IP addresses

<ul>
<li>publicly registered</li>
<li>directly access the Internet with a public IP address</li>
</ul></li>
<li>private IP addresses

<ul>
<li>not publicly registered</li>
<li>cannot directly access the Internet with a private IP address</li>
<li>only used internally, those IP addressed can not be seen on the Internet or routers</li>
<li>if the packet contains these IP addresses, it may be considered as an error and dropped immediately
<br></li>
</ul></li>
</ul></li>
</ul>

<table>
<thead>
<tr>
<th align="center"><strong>name</strong></th>
<th align="center"><strong>start IP address</strong></th>
<th align="center"><strong>end IP address</strong></th>
<th align="center"><strong>subnet</strong></th>
<th align="center"><strong>remark</strong></th>
</tr>
</thead>

<tbody>
<tr>
<td align="center">24-bit block</td>
<td align="center">10.0.0.0</td>
<td align="center">10.255.255.255</td>
<td align="center">10.0.0.0/8</td>
<td align="center">apple use this</td>
</tr>

<tr>
<td align="center">20-bit block</td>
<td align="center">172.16.0.0</td>
<td align="center">173.31.255.255</td>
<td align="center">172.16.0.0/12</td>
<td align="center">not many use this</td>
</tr>

<tr>
<td align="center">16-bit block</td>
<td align="center">192.168.0.0</td>
<td align="center">192.168.255.255</td>
<td align="center">192.168.0.0/16</td>
<td align="center">most use this, e.g. asus</td>
</tr>
</tbody>
</table>

<ul>
<li>advantage: good for security, just like a firewall, that is why we may use this even if we will use the IPv6</li>
<li>outside hosts want to communicate with an internal host

<ul>
<li>DDNS</li>
<li>configure NAT translation table in advance (the router would allow you to do that), called port forwarding</li>
</ul></li>
<li><strong>Q: The IP address you find on your iPhone is your smart phone IP address?</strong>

<ul>
<li>A: No. This IP address is assigned by WiFi router, you can dial *3001#12345#* to test for iPhone.</li>
</ul></li>
</ul></li>

<li><p>IPv6</p>

<ul>
<li>differences between IPv4 and IPv6
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-23%20%E4%B8%8B%E5%8D%883.57.12.png" alt=""></figure></li>
<li>motivations

<ul>
<li>to solve the IPv4 address space shortage problem</li>
<li>to speed up packet processing/forwarding (by flow label)</li>
<li>to facilitate QoS</li>
</ul></li>
<li>transition from IPv4 to IPv6

<ul>
<li>use tunneling: IPv6 datagram carried as payload in IPv4 datagram among IPv4 routers
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-23%20%E4%B8%8B%E5%8D%884.35.20.png" alt=""></figure></li>
<li>set the value of upper layer protocol (in IPv4 header) is 41, making routers know IPv4 datagram is covered by IPv6 datagram</li>
<li>problems

<ul>
<li>more overhead</li>
<li>packets would be too big and fragmentated by router

<ul>
<li>consider the maximum length of Ethernet frame is 1500 bytes</li>
</ul></li>
</ul></li>
<li>example
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-23%20%E4%B8%8B%E5%8D%884.42.29.png" alt=""></figure></li>
</ul></li>
</ul></li>
</ul>

<h2 id="routing">Routing</h2>

<p><strong>Classification overview</strong>
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-24%20%E4%B8%8B%E5%8D%882.42.29.png" alt=""></figure></p>

<p><strong>Link-state routing</strong></p>

<ul>
<li>net topology, link costs known to all nodes

<ul>
<li>via &quot;link state broadcast&quot;, each router knows its neighbours by configuration</li>
<li>all nodes have same info</li>
</ul></li>
<li>each node computes its shortest paths to all other nodes using Dijkstra's algorithm

<ul>
<li>based on the shortest paths found, configure the local forwarding table</li>
</ul></li>
<li>OSPF (open shortest path first)

<ul>
<li>open: publicly available (cisco may monopoly the market in the past)</li>
<li>link state routing

<ul>
<li>LS packet dissemination</li>
<li>topology map at each other</li>
<li>route computation using Dijkstra's algorithm</li>
</ul></li>
<li>OSPF advertisement message carries one entry per neighbour</li>
<li>advertisement flooded to entire network

<ul>
<li>directly over IP (rather than TCP or UDP) with &quot;upper layer = 89&quot;</li>
</ul></li>
<li>reliability (although use IP)

<ul>
<li>by retransmission, just like DNS</li>
</ul></li>
</ul></li>
</ul>

<p><figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-24%20%E4%B8%8B%E5%8D%883.38.18.png" alt=""></figure></p>

<p><strong>Distance vector routing</strong></p>

<ul>
<li>distance = hop count</li>
<li>vector = next hop</li>
<li>by periodically exchanging distance vectors (DVs) with neighbours, each router knows neighbours' distance to destinations</li>
<li>each router uses Bellman-Ford algorithm to refine its own DVs.

<ul>
<li>e.g., using neighbour with the shortest distance to a destination as next hop</li>
<li>&quot;routing by rumors&quot;
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-24%20%E4%B8%8B%E5%8D%883.36.25.png" alt=""></figure></li>
</ul></li>
<li>LS vs DV

<ul>
<li>LS has the global topology and information, and each router calculate the ways by themselves</li>
<li>DV just trust others, they share the information with each other, each router just knows their neighbours know</li>
<li>the result may be same</li>
<li>message complexity

<ul>
<li>LS: with n nodes &amp; E links, O(nE) messages sent</li>
<li>DV: exchange between neighbours only</li>
</ul></li>
<li>speed of convergence

<ul>
<li>LS: relatively fast</li>
<li>DV: convergence time varies</li>
</ul></li>
<li>robustness

<ul>
<li>LS: node can advertise incorrect link cost, but each node computes only its own table</li>
<li>DV: node can advertise incorrect path cost, each node's table just trust and use it (error propagation)</li>
</ul></li>
</ul></li>
<li>RIP (routing information protocol)

<ul>
<li>distance metric: the number of hops (max = 15), each link has cost 1</li>
<li>DVs exchanged with neighbours every 30 sec in advertisement messages</li>
<li>advertisements sent in UDP segments</li>
</ul></li>
</ul>

<p><figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-24%20%E4%B8%8B%E5%8D%887.40.46.png" alt=""></figure></p>

<p><strong>Hierarchical routing</strong></p>

<ul>
<li>aggregate routers into regions, called &quot;autonomous systems&quot; (AS)

<ul>
<li>each AS is assigned a unique AS number (16 bits, but change to 32 bits today, due to shortage)</li>
<li>routers in same AS run same routing protocol

<ul>
<li>&quot;intra-AS&quot; routing protocol, e.g. OSPF, RIP</li>
<li>routers in different AS can run different intra-AS routing protocol</li>
</ul></li>
<li>ASes must be interconnected via gateway routers</li>
<li>forwarding table configured by both intra- and inter-AS routing algorithm

<ul>
<li>intra-AS sets entries for internal dests</li>
<li>inter-AS &amp; intra-AS sets entries for external dests</li>
<li>for multiple ASes, we can use hot potato routing (shorest way) or obey the policy (e.g. content provider), etc.</li>
<li>two layers is enough, but in the future, it is hard to say</li>
</ul></li>
</ul></li>
</ul>

<p><figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-24%20%E4%B8%8B%E5%8D%887.58.59.png" alt=""></figure></p>

<ul>
<li><p>BGP (border gateway protocol)</p>

<ul>
<li>may be version 4</li>
<li>glue that holds the Internet/ASes together</li>
<li>tasks

<ul>
<li>for outbound traffic (how to find suitable way to other ASes)

<ul>
<li>obtain subnet reachability information from neighbouring ASes</li>
<li>propagate reachability information to all AS-internal routers</li>
<li>determine good routers to other networks based on reachability information and policy</li>
</ul></li>
<li>for inbound traffic

<ul>
<li>advertise subnets that the AS can help to reach</li>
<li>hosts of outside ASes go to my ASes, make sure hosts of my AS are visible</li>
</ul></li>
</ul></li>

<li><p>BGP session: two BGP routers (&quot;peers&quot;) exchange BGP messages</p>

<ul>
<li>advertising paths to different subnets (&quot;path vector&quot; protocol)</li>
<li>exchange over TCP connections (sever port 179)

<ul>
<li>reliable data transfer</li>
<li>permenant connection, only one overhead</li>
</ul></li>
<li>catagory

<ul>
<li>eBGP (external BGP)

<ul>
<li>logical and TCP connection</li>
<li>direct link</li>
</ul></li>
<li>iBGP (internal BGP)

<ul>
<li>logical and TCP connection</li>
<li>share information (purpose)</li>
</ul></li>
</ul></li>
</ul>

<p><figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-24%20%E4%B8%8B%E5%8D%888.31.45.png" alt=""></figure></p>

<ul>
<li>conprehensive example

<ul>
<li>AS3 is willing to carry transit traffic N1: router 3a advertises path (N1, AS3) to router 1c over eBGP session</li>
<li>1c applies its <strong>IMPORT policies</strong> to decide whether it wants to forward packets to N1 via 3a

<ul>
<li>if yes, forwarding table in 1c is updated to indicate 3a as the next-hop for N1</li>
</ul></li>
<li>based on its <strong>EXPORT policies</strong>, assume AS1 is willing to carry transit traffic (from other ASes) to N1 (if AS3 is AS1 customer)</li>
<li>AS1 advertise path (N1, AS3, AS1) to AS2 via eBGP session. (note: 1b receives path (N1, AS3) from 1c via iBGP session)
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-24%20%E4%B8%8B%E5%8D%888.51.46.png" alt=""></figure></li>
</ul></li>
<li>elimination rules

<ul>
<li>local preference (LOCAL_PREF) value attribute: policy decision</li>
<li>shortest AS-PATH: AS hops rather than router hops</li>
<li>closest NEXT-HOP router: hot potato routing</li>
<li>additional criteria: backbone, Tier-1 ISP, etc.</li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<h2 id="internet-control-message-protocol-icmp">Internet Control Message Protocol (ICMP)</h2>

<p><strong>Overview</strong></p>

<ul>
<li>mainly focus on error reporting (also echo request/reply by ping)
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-24%20%E4%B8%8B%E5%8D%889.17.42.png" alt=""></figure></li>
<li>network-layer above IP

<ul>
<li>upper layer protocol = 1</li>
</ul></li>
<li>ICMP message: type and code
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-24%20%E4%B8%8B%E5%8D%889.16.08.png" alt=""></figure></li>
</ul>

<p><strong>Traceroute and ICMP</strong></p>

<ul>
<li>source sends three UDP segments to dest

<ul>
<li>first set has TTL = 1</li>
<li>second set has TTL = 2, etc.</li>
<li>unlikely port number (very likely no specific ports in the dest)</li>
</ul></li>
<li>when nth set of datagrams arrives to nth router

<ul>
<li>router discards datagrams</li>
<li>and sends source ICMP messages (type 11, code 0)</li>
<li>ICMP messages includes name of router &amp; IP address</li>
</ul></li>
<li>when ICMP messages arrive, source records RTTs</li>
<li>stopping criteria

<ul>
<li>UDP segment eventually arrives at destination host</li>
<li>destination returns ICMP &quot;port unreachable&quot; message (type 3, code 3)</li>
<li>source stops</li>
</ul></li>
</ul>

<h2 id="datacenter-networks">Datacenter Networks</h2>

<p><strong>Load balancer: application-layer routing</strong></p>

<ul>
<li>receives external client requests</li>
<li>directs workload within datacenter

<ul>
<li>datacenter TCP (specifically)</li>
</ul></li>
<li>returns results to external client (hiding datacenter internals from client)</li>
</ul>

<p><figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-24%20%E4%B8%8B%E5%8D%889.33.06.png" alt=""></figure></p>
]]></content>
        </item>
        
        <item>
            <title>互联网金融安全JD汇总(Alibaba)</title>
            <link>https://www.marshalgao.com/%E4%BA%92%E8%81%94%E7%BD%91%E9%87%91%E8%9E%8D%E5%AE%89%E5%85%A8jd%E6%B1%87%E6%80%BBalibaba/</link>
            <pubDate>Wed, 21 Oct 2020 09:52:19 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/%E4%BA%92%E8%81%94%E7%BD%91%E9%87%91%E8%9E%8D%E5%AE%89%E5%85%A8jd%E6%B1%87%E6%80%BBalibaba/</guid>
            <description>阿里云智能-产品策略专家  岗位描述  产品和产品组合规划：通过行业洞察、产品竞分、技术发展趋势研究等例行活动，结合公司战略和前线业务需求，协同产品、架构师、销售团队，输出产品和产品组合规划，提升云产品整体竞争力 创新产品孵化：识别和挖掘具有高商业回报的产品和技术，从产品定义、产品策略、商业模式、产品竞争力、客户/项目反馈等维度，提供专业能力支持，实现产品成熟和价值放大 友商竞分：面向国内外主要竞争对手，从战略方向、官网/展会分析、产品级竞争分析、客户实际体验等方面，开展深入洞察和剖析，例行输出洞察报告、产品竞争力提升设计和How to beat 技术发展趋势研究：面向各个产品和技术领域，对未来发展趋势进行分析研究，提出产品发展规划建议，发起创新产品或功能孵化 行业发展趋势洞察：面向零售、金融、政府、制造、教育、医疗等行业，从客户需求、市场空间、政策走势、行业解决方案等方面，开展深入洞察和剖析，例行输出洞察报告和解决方案设计   岗位要求  深刻理解云计算市场发展趋势，熟悉云计算核心产品和技术，有实际大型IT产品研发工作经验，有实际大型IT产品商业化操盘经验，熟悉和了解1到2个重点行业市场玩法 有IT类大型企业产品和解决方案需求、竞分、营销、规划相关5年以上工作经验；有成熟的咨询或分析思考框架，良好的商业嗅觉和数据敏感度，具备对云计算和互联网产业较为成熟的洞察力和理解力 有大型软、硬件实际开发经验，对包括IaaS、安全、数据库、大数据、人工智能、解决方案在内的至少一个云产品领域技术非常熟悉 对包括制造、金融、医疗、教育、政府、交通、能源行业在内的至少一个行业有深入理解 对商业敏感，有商业嗅觉，对技术有热忱 创新型人才优先，有国际化视野优先    阿里云智能事业群-云安全高级产品专家  职位描述  负责阿里云 云安全产品（包括不限于DDoS防护、WAF、流量分析、终端管理、堡垒机、业务风控、AI安全应用、金融反欺诈等）的商业化 定义负责产品的功能，设计商业模式，提升产品用户体验，对产品销售数字和竞争力负责   岗位要求  了解企业安全行业，对于安全行业的发展有自己的思考 有过成功的产品经验，客户数超过1000或年营收过亿 逻辑性强，有很好的商业敏感度和行业知识 有较强的跨部门的能力与团队协调能力，优秀的应对变化和困难的能力，始终保持思变创新的意识    蚂蚁集团-中台产品专家/高级专家-大安全产品中心  岗位描述  负责蚂蚁金服风控平台产品的中长期规划和产品架构设计，关注行业发展及技术创新，驱动产品的发展和升级换代 与技术团队合作，基于中台化理念，进行合理的业务抽象和产品设计，并推动产品的实施 协调各部门资源和支持，驱动项目进度，主导产品落地，合理评估优先级，确保产品的业务目标 产品交互、视觉设计，产品功能优化和迭代，及合作伙伴沟通和管理等具体工作   岗位要求  5年及以上互联网产品经理工作经验，或金融/支付风控/AI产品工作经验，了解线上支付业务和风险控制业务 具备严谨的逻辑思维和创新能力，能够平衡把握细节和关键，基于业务价值，进行产品的规划设计 具备良好的沟通能力，善于团队合作，促进团队内外统一目标，顺畅协作 在大数据风控领域有宽阔的视野，有线上系统架构、大数据平台、数据建模经验优先 专业的项目管理能力和时间管理能力，能够多事务并发处理，确保产品高效落地，并拿到预期结果    阿里云智能事业群-云安全产品专家/高级专家  岗位描述  负责安全产品的市场定位，产品设计，规划产品愿景及发展方向，定义开发迭代范围，目标实现路径和策略 跟踪市场趋势和竞争，分析竞品，明确产品战略，提高核心竞争力 对用户体验、用户数、销售额等关键指标负责   岗位要求  工具：axure、PRD文档 交互设计经验，了解其中的基本原则 网络、系统、数据库、安全等技术的基本实现原理 理解商业目标，对市场、行业有自己的调研方法 成功商业产品的经验，在用户数或销售额上有过成功实践    阿里集团-CRO-产品专家-系统/网络/应用安全  岗位描述  反入侵产品：打造阿里巴巴集团的系统、网络安全检测防御能力，入侵检测、webshell检测、异常行为分析等产品的设计建设 流量攻防产品：DDoS攻击防御、WAF、CC攻击防御、反爬虫/机器行为等产品能力建设、技术创新、方案制定，提升安全产品的能力 终端保护产品：负责APP端加固、应用实时防御和端风控产品的设计建设 人机验证/挑战产品：负责验证码、问答验证等人机挑战风控产品的设计建设   岗位要求  熟悉安全产品的基本工作原理，清楚安全产品的相关能力要求，能够独立设计一款安全产品 有较好的产品架构能力，与完整的产品未来发展思路 数据分析和数据决策能力 技术领域多选一（至少）  WEB安全 人机挑战、人机验证、验证码安全技术 二进制安全攻防对抗、病毒行为分析、通信协议分析等 服务器入侵检测、事件溯源、日志分析、大数据威胁检测等 端安全产品，如HIDS，终端DLP，虚拟桌面等 关注最新web、系统漏洞，能够分析漏洞原理和实现PoC 熟悉IOT、物联网、智能硬件设备安全   加分项  安全产品相关研发经验，设计过面向大中型业务的安全防御、风控产品 熟悉日志、数据分析，能帮助业务一起分析恶意行为，提出自己的见解，转换成产品设计解决业务问题 了解安全运营的流程和心智，能够通过数据分析找到产品关键设计，提升安全运营的整体效率      </description>
            <content type="html"><![CDATA[<h4 id="阿里云智能-产品策略专家">阿里云智能-产品策略专家</h4>
<ul>
<li>岗位描述
<ul>
<li>产品和产品组合规划：通过行业洞察、产品竞分、技术发展趋势研究等例行活动，结合公司战略和前线业务需求，协同产品、架构师、销售团队，输出产品和产品组合规划，提升云产品整体竞争力</li>
<li>创新产品孵化：识别和挖掘具有高商业回报的产品和技术，从产品定义、产品策略、商业模式、产品竞争力、客户/项目反馈等维度，提供专业能力支持，实现产品成熟和价值放大</li>
<li>友商竞分：面向国内外主要竞争对手，从战略方向、官网/展会分析、产品级竞争分析、客户实际体验等方面，开展深入洞察和剖析，例行输出洞察报告、产品竞争力提升设计和How to beat</li>
<li>技术发展趋势研究：面向各个产品和技术领域，对未来发展趋势进行分析研究，提出产品发展规划建议，发起创新产品或功能孵化</li>
<li>行业发展趋势洞察：面向零售、金融、政府、制造、教育、医疗等行业，从客户需求、市场空间、政策走势、行业解决方案等方面，开展深入洞察和剖析，例行输出洞察报告和解决方案设计</li>
</ul>
</li>
<li>岗位要求
<ul>
<li>深刻理解云计算市场发展趋势，熟悉云计算核心产品和技术，有实际大型IT产品研发工作经验，有实际大型IT产品商业化操盘经验，熟悉和了解1到2个重点行业市场玩法</li>
<li>有IT类大型企业产品和解决方案需求、竞分、营销、规划相关5年以上工作经验；有成熟的咨询或分析思考框架，良好的商业嗅觉和数据敏感度，具备对云计算和互联网产业较为成熟的洞察力和理解力</li>
<li>有大型软、硬件实际开发经验，对包括IaaS、安全、数据库、大数据、人工智能、解决方案在内的至少一个云产品领域技术非常熟悉</li>
<li>对包括制造、金融、医疗、教育、政府、交通、能源行业在内的至少一个行业有深入理解</li>
<li>对商业敏感，有商业嗅觉，对技术有热忱</li>
<li>创新型人才优先，有国际化视野优先</li>
</ul>
</li>
</ul>
<h4 id="阿里云智能事业群-云安全高级产品专家">阿里云智能事业群-云安全高级产品专家</h4>
<ul>
<li>职位描述
<ul>
<li>负责阿里云 云安全产品（包括不限于DDoS防护、WAF、流量分析、终端管理、堡垒机、业务风控、AI安全应用、金融反欺诈等）的商业化</li>
<li>定义负责产品的功能，设计商业模式，提升产品用户体验，对产品销售数字和竞争力负责</li>
</ul>
</li>
<li>岗位要求
<ul>
<li>了解企业安全行业，对于安全行业的发展有自己的思考</li>
<li>有过成功的产品经验，客户数超过1000或年营收过亿</li>
<li>逻辑性强，有很好的商业敏感度和行业知识</li>
<li>有较强的跨部门的能力与团队协调能力，优秀的应对变化和困难的能力，始终保持思变创新的意识</li>
</ul>
</li>
</ul>
<h4 id="蚂蚁集团-中台产品专家高级专家-大安全产品中心">蚂蚁集团-中台产品专家/高级专家-大安全产品中心</h4>
<ul>
<li>岗位描述
<ul>
<li>负责蚂蚁金服风控平台产品的中长期规划和产品架构设计，关注行业发展及技术创新，驱动产品的发展和升级换代</li>
<li>与技术团队合作，基于中台化理念，进行合理的业务抽象和产品设计，并推动产品的实施</li>
<li>协调各部门资源和支持，驱动项目进度，主导产品落地，合理评估优先级，确保产品的业务目标</li>
<li>产品交互、视觉设计，产品功能优化和迭代，及合作伙伴沟通和管理等具体工作</li>
</ul>
</li>
<li>岗位要求
<ul>
<li>5年及以上互联网产品经理工作经验，或金融/支付风控/AI产品工作经验，了解线上支付业务和风险控制业务</li>
<li>具备严谨的逻辑思维和创新能力，能够平衡把握细节和关键，基于业务价值，进行产品的规划设计</li>
<li>具备良好的沟通能力，善于团队合作，促进团队内外统一目标，顺畅协作</li>
<li>在大数据风控领域有宽阔的视野，有线上系统架构、大数据平台、数据建模经验优先</li>
<li>专业的项目管理能力和时间管理能力，能够多事务并发处理，确保产品高效落地，并拿到预期结果</li>
</ul>
</li>
</ul>
<h4 id="阿里云智能事业群-云安全产品专家高级专家">阿里云智能事业群-云安全产品专家/高级专家</h4>
<ul>
<li>岗位描述
<ul>
<li>负责安全产品的市场定位，产品设计，规划产品愿景及发展方向，定义开发迭代范围，目标实现路径和策略</li>
<li>跟踪市场趋势和竞争，分析竞品，明确产品战略，提高核心竞争力</li>
<li>对用户体验、用户数、销售额等关键指标负责</li>
</ul>
</li>
<li>岗位要求
<ul>
<li>工具：axure、PRD文档</li>
<li>交互设计经验，了解其中的基本原则</li>
<li>网络、系统、数据库、安全等技术的基本实现原理</li>
<li>理解商业目标，对市场、行业有自己的调研方法</li>
<li>成功商业产品的经验，在用户数或销售额上有过成功实践</li>
</ul>
</li>
</ul>
<h4 id="阿里集团-cro-产品专家-系统网络应用安全">阿里集团-CRO-产品专家-系统/网络/应用安全</h4>
<ul>
<li>岗位描述
<ul>
<li>反入侵产品：打造阿里巴巴集团的系统、网络安全检测防御能力，入侵检测、webshell检测、异常行为分析等产品的设计建设</li>
<li>流量攻防产品：DDoS攻击防御、WAF、CC攻击防御、反爬虫/机器行为等产品能力建设、技术创新、方案制定，提升安全产品的能力</li>
<li>终端保护产品：负责APP端加固、应用实时防御和端风控产品的设计建设</li>
<li>人机验证/挑战产品：负责验证码、问答验证等人机挑战风控产品的设计建设</li>
</ul>
</li>
<li>岗位要求
<ul>
<li>熟悉安全产品的基本工作原理，清楚安全产品的相关能力要求，能够独立设计一款安全产品</li>
<li>有较好的产品架构能力，与完整的产品未来发展思路</li>
<li>数据分析和数据决策能力</li>
<li>技术领域多选一（至少）
<ul>
<li>WEB安全</li>
<li>人机挑战、人机验证、验证码安全技术</li>
<li>二进制安全攻防对抗、病毒行为分析、通信协议分析等</li>
<li>服务器入侵检测、事件溯源、日志分析、大数据威胁检测等</li>
<li>端安全产品，如HIDS，终端DLP，虚拟桌面等</li>
<li>关注最新web、系统漏洞，能够分析漏洞原理和实现PoC</li>
<li>熟悉IOT、物联网、智能硬件设备安全</li>
</ul>
</li>
<li>加分项
<ul>
<li>安全产品相关研发经验，设计过面向大中型业务的安全防御、风控产品</li>
<li>熟悉日志、数据分析，能帮助业务一起分析恶意行为，提出自己的见解，转换成产品设计解决业务问题</li>
<li>了解安全运营的流程和心智，能够通过数据分析找到产品关键设计，提升安全运营的整体效率</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>ICOM6045 Cryptography</title>
            <link>https://www.marshalgao.com/icom6045-cryptography/</link>
            <pubDate>Tue, 20 Oct 2020 23:12:13 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/icom6045-cryptography/</guid>
            <description>Overview Security Threats (explain basically)
 Content  eavesdropping: the message would be listened by others when you communicate with your friends, using email or whatsapp masquerading: identity stealing message tampering: someone modify the message in the middle replaying: receive the same message twice, it is dangerous in transactions, but not in instant message, etc  Machine  infiltration: receive marewares (can control PC or smart phones) from hackers  Traffic  traffic analysis: only interestes in how to communicate denial of service: make others cannot access the services   Security Services (implemented by security mechanisms)</description>
            <content type="html"><![CDATA[<h2 id="overview">Overview</h2>

<p><strong>Security Threats (explain basically)</strong></p>

<ul>
<li>Content

<ul>
<li>eavesdropping: the message would be listened by others when you communicate with your friends, using email or whatsapp</li>
<li>masquerading: identity stealing</li>
<li>message tampering: someone modify the message in the middle</li>
<li>replaying: receive the same message twice, it is dangerous in transactions, but not in instant message, etc</li>
</ul></li>
<li>Machine

<ul>
<li>infiltration: receive marewares (can control PC or smart phones) from hackers</li>
</ul></li>
<li>Traffic

<ul>
<li>traffic analysis: only interestes in how to communicate</li>
<li>denial of service: make others cannot access the services</li>
</ul></li>
</ul>

<p><strong>Security Services (implemented by security mechanisms)</strong></p>

<ul>
<li>Security policy

<ul>
<li>from risk analysis, we can have some security policies to deal with</li>
<li>may not cover all possible risks, should have a reasonable trade-off between risks and available resources</li>
</ul></li>
<li>ISO security architecture

<ul>
<li>authentication</li>
<li>access control</li>
<li>data confidentiality</li>
<li>data integrity</li>
<li>nonrepudiation</li>
</ul></li>
<li>Basic computer security concepts (CIA)

<ul>
<li>related to cryptography

<ul>
<li>confidentiality: prevent unauthorized access</li>
<li>integrity: prevent unauthorized modification</li>
</ul></li>
<li>related to access control

<ul>
<li>availability: prevent unauthorized withholding of information or resources</li>
<li>authenticity: verify the origin of data</li>
<li>accountability: audit information and trace to the responsible party if there are security issues</li>
</ul></li>
</ul></li>
</ul>

<h2 id="encryption-and-decryption-focus-on-classical-ones">Encryption and Decryption (focus on classical ones)</h2>

<p><strong>Types (still use today)</strong></p>

<ul>
<li>symmetric key encryption (single key cryptosystem)

<ul>
<li>using the same encryption and decryption key

<ul>
<li>e.g. AES, 3DES, RC4, pdf password</li>
</ul></li>
<li>usage:

<ul>
<li>file encryption</li>
<li>others with lots of data</li>
</ul></li>
<li>rely on substitution and permutation, do not need to much computing</li>
</ul></li>

<li><p>public key encryption (two key cryptosystem)</p>

<ul>
<li>using different encryption and decryption keys

<ul>
<li>public key (encryption key): everyone knows it</li>
<li>private key (decryption key): only I know</li>
<li>e.g. RSA (still popular today)</li>
</ul></li>
<li>usage:

<ul>
<li>communication</li>
<li>digital signature</li>
<li>others not cover lots of data</li>
</ul></li>
<li>rely on complex math, need much computing</li>
</ul>

<p><strong>if you use the e-banking system or https, you should use both of them</strong></p></li>
</ul>

<p><strong>Monoalphabetic substitutions</strong></p>

<ul>
<li>concept

<ul>
<li>substitution: each letter is substituted by another one</li>
<li>permutation: reorder the elements of a series</li>
</ul></li>
<li>caesar cipher

<ul>
<li>each letter is translated to the letter a fixed number of letters after it in the alphabet

<ul>
<li>Julius Caesar used a shift of 3</li>
</ul></li>
<li>attack (short message)

<ul>
<li>find the similarity of ciphertext (e.g. &quot;wr&quot; means &quot;to&quot; -&gt; &quot;wrr&quot; means &quot;too&quot;)</li>
<li>guess the pattern(the number of shifting)</li>
</ul></li>
</ul></li>
<li>cryptanalysis (mainly for long message)

<ul>
<li>count the frequency of the letter, find the difference according to the frequency of normal articles</li>
<li>weakness: the frequency of distribution reflects the distribution of the underlying alphabet

<ul>
<li>make it stronger -&gt; polyalphabetic substitution ciphers

<ul>
<li>using combine or multiple distributions -&gt; different tables</li>
<li>if you use 2 tables, it is not safe (if someone can guess the tables)</li>
<li>26 tables may be safer, but it is difficult to maintain

<ul>
<li>solution (vigenere cipher): use a keyword (not be encrypted, but use different method or channel), letters in the key will be used to select a particular permutation (e.g. juliet, which needs to be repeated)</li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>

<li><p>index of coincidence</p>

<ul>
<li><p>a measure of the variation between frequencies in a distribution (n is the number of ciphertext)</p>

<p><span  class="math">\[IC=\sum_{i=a}^{i=z}\frac{Freq(i)\times(Freq(i)-1)}{n\times(n-1)}\]</span></p></li>

<li><p>IC ranges from 0.0384 (polyalphabetic substitution with perfectly flat distribution) to 0.068(monoalphabetic substitution from common English)</p>

<table>
<thead>
<tr>
<th align="center">Alphabets</th>
<th align="center">IC</th>
</tr>
</thead>

<tbody>
<tr>
<td align="center">1</td>
<td align="center">0.068</td>
</tr>

<tr>
<td align="center">2</td>
<td align="center">0.052</td>
</tr>

<tr>
<td align="center">3</td>
<td align="center">0.047</td>
</tr>

<tr>
<td align="center">4</td>
<td align="center">0.044</td>
</tr>

<tr>
<td align="center">5</td>
<td align="center">0.044</td>
</tr>

<tr>
<td align="center">10</td>
<td align="center">0.041</td>
</tr>

<tr>
<td align="center">large</td>
<td align="center">0.038</td>
</tr>
</tbody>
</table></li>

<li><p>the value of IC</p>

<ul>
<li>close to or above 0.068 -&gt; monoalphabetic substitution</li>
<li>close to or below 0.038 -&gt; polyalphabetic substitution</li>
</ul></li>

<li><p>kasiski method: determine when a pattern of encrypting permutations has repeated to predict the number of alphabets used for substitutions</p>

<ul>
<li>search for repeated sequence of characters</li>
<li>calculate the distance between each two of them</li>
<li>the estimated key length is the common divisor</li>
</ul></li>
</ul></li>

<li><p>analyze polyalphabetic cipher</p>

<ul>
<li>use the kasiski method to predict likely numbers of enciphering alphabets</li>
<li>if no numbers emerge fairly regularly, the encryption is not probably not a polyalphabetic substitution</li>
<li>divide the ciphertext into serval sequences, according to the key length</li>
<li>calculate IC for each sequence</li>
</ul></li>
</ul>

<p><strong>The &quot;perfect&quot; substitution cipher</strong></p>

<ul>
<li>use infinite or a large nonrepeating keys

<ul>
<li>problems<br>

<ul>
<li>absolute synchronization between sender and receiver, difficult to distribute</li>
<li>need an unlimited number of keys</li>
</ul></li>
</ul></li>

<li><p>vernam cipher</p>

<ul>
<li>use random number as the key</li>

<li><p>e.g.</p>

<table>
<thead>
<tr>
<th align="center">plaintext</th>
<th align="center">V</th>
<th align="center">E</th>
<th align="center">R</th>
<th align="center">N</th>
<th align="center">A</th>
<th align="center">M</th>
<th align="center">C</th>
<th align="center">I</th>
<th align="center">P</th>
<th align="center">H</th>
<th align="center">E</th>
<th align="center">R</th>
</tr>
</thead>

<tbody>
<tr>
<td align="center">encoded</td>
<td align="center">21</td>
<td align="center">4</td>
<td align="center">17</td>
<td align="center">13</td>
<td align="center">0</td>
<td align="center">12</td>
<td align="center">2</td>
<td align="center">8</td>
<td align="center">15</td>
<td align="center">7</td>
<td align="center">4</td>
<td align="center">17</td>
</tr>

<tr>
<td align="center">random</td>
<td align="center">76</td>
<td align="center">48</td>
<td align="center">16</td>
<td align="center">82</td>
<td align="center">33</td>
<td align="center">3</td>
<td align="center">58</td>
<td align="center">11</td>
<td align="center">60</td>
<td align="center">5</td>
<td align="center">48</td>
<td align="center">88</td>
</tr>

<tr>
<td align="center">sum</td>
<td align="center">97</td>
<td align="center">52</td>
<td align="center">33</td>
<td align="center">95</td>
<td align="center">33</td>
<td align="center">15</td>
<td align="center">60</td>
<td align="center">19</td>
<td align="center">75</td>
<td align="center">12</td>
<td align="center">52</td>
<td align="center">105</td>
</tr>

<tr>
<td align="center">mod 26</td>
<td align="center">19</td>
<td align="center">0</td>
<td align="center">7</td>
<td align="center">17</td>
<td align="center">18</td>
<td align="center">15</td>
<td align="center">8</td>
<td align="center">19</td>
<td align="center">23</td>
<td align="center">12</td>
<td align="center">0</td>
<td align="center">1</td>
</tr>

<tr>
<td align="center">ciphertext</td>
<td align="center">T</td>
<td align="center">A</td>
<td align="center">H</td>
<td align="center">R</td>
<td align="center">S</td>
<td align="center">P</td>
<td align="center">I</td>
<td align="center">T</td>
<td align="center">X</td>
<td align="center">M</td>
<td align="center">A</td>
<td align="center">B</td>
</tr>
</tbody>
</table></li>

<li><p>possible attack</p>

<ul>
<li>random number generator</li>
<li>most common type of random number generator: linear congruential random number generator</li>
<li>seed: the initial value <span  class="math">\(r_0\)</span></li>

<li><p>successive random number <span  class="math">\(r_{i+1}\)</span></p>

<p><span  class="math">\[r_{i+1}=(a\times r_i+b)\mod\ n\]</span></p>

<ul>
<li>if someone knows a, b and n, he or she can use the current random number to calculate the next random number</li>
</ul></li>

<li><p>cracking the random number generator becomes solving a systems of equations</p></li>
</ul></li>
</ul></li>
</ul>

<p><strong>Permutations (transpositions)</strong></p>

<ul>
<li>rearrange the symbols of a message and try to break established patterns

<ul>
<li>columnar transposition: rearrangement of the characters of the plaintext into columns

<ul>
<li>e.g. THIS IS A MESSAGE TO SHOW HOW A COLUMN TRANSPOSITION WORKS
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-21%20%E4%B8%8B%E5%8D%888.17.38.png" alt=""></figure></li>
<li>cryptanalysis

<ul>
<li>compute the letter frequencies: all letters appear with their normal frequencies implies that a transposition has been performed</li>
<li>break the text into columns by compare a block of ciphertext characters against characters successively farther away in the ciphertext</li>
</ul></li>
</ul></li>
</ul></li>
<li>complexity

<ul>
<li>the execution time of the algorithm is proportional to the length of the message</li>
<li>store all characters</li>
<li>output cannot be generated until all characters have been read (not good for long message)</li>
</ul></li>
<li>alternative method: permute the characters of the plaintext with a fixed period d

<ul>
<li>e.g. d = 5, and the permutation is (2 4 5 1 3)
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-21%20%E4%B8%8B%E5%8D%888.18.14.png" alt=""></figure></li>
</ul></li>
</ul>

<p><strong>Confusion and Diffusion</strong></p>

<ul>
<li>confusion: change symbols

<ul>
<li>bad confusion: caesar cipher</li>
<li>good confusion: polyalphabetic substitution with a long key</li>
</ul></li>
<li>diffusion: change order

<ul>
<li>bad diffusion: the substitution ciphers</li>
<li>good diffusion: the transposition ciphers</li>
</ul></li>
<li>DES provides good confusion and diffusion

<ul>
<li>substitution provides confusion</li>
<li>permutation provides diffusion</li>
</ul></li>
<li>purpose of cryptography -&gt; data confidentiality
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-21%20%E4%B8%8B%E5%8D%889.25.17.png" alt=""></figure></li>
</ul>

<p><strong>Ciphers</strong></p>

<ul>
<li>stream cipher: convert one symbol of plaintext immediately into a symbol of ciphertext, e.g. the substitution cipher

<ul>
<li>advantages:

<ul>
<li>speed of transformation</li>
<li>low error propagation: each symbol is separately encoded</li>
</ul></li>
<li>disadvantages:

<ul>
<li>low diffusion: all information of a symbol is contained in the symbol, subject to attack like frequency count, digram analysis, IC and Kasiski method</li>
<li>possible for malicious insertions and modifications</li>
</ul></li>
</ul></li>
<li>block cipher: encrypt a group of plaintext symbol as one block, e.g. the columnar transposition cipher

<ul>
<li>advantages:

<ul>
<li>diffusion: information of plaintext is diffused into several ciphertext symbols</li>
<li>immunity to insertions: impossible to insert a single symbol in a block</li>
</ul></li>
<li>disadvantages:

<ul>
<li>slowness of encryption</li>
<li>error propagation: an error will affect all other characters in the same block</li>
</ul></li>
</ul></li>
</ul>

<p><strong>Rotor Machine</strong></p>

<ul>
<li>contains three rotors (key)</li>
<li>is implemented by polyalphabetic substitution (not fixed substitution)

<ul>
<li>change one position, change the key</li>
<li>the number of keys is <span  class="math">\({26}^3\)</span></li>
</ul></li>
<li>procedure

<ul>
<li>use original setting to do substitution</li>
<li>after one input, the next input may generate the rotation of the first rotor (one position)</li>
<li>if the first rotor rotates a cirle, jump to the second rotor</li>
<li>after one input, the next input may generate the rotation of the second rotor (one position)</li>
<li>until three rotors finish their rotation -&gt; original status -&gt; again and again</li>
</ul></li>
<li>utility: enigma machine (by German, with a 256-element rotor, use all rotors twice for each letter)</li>
<li>example
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-23%20%E4%B8%8A%E5%8D%8812.54.53.png" alt=""></figure></li>
</ul>

<h2 id="modern-cryptography">Modern Cryptography</h2>

<ul>
<li>DES (Data Encryption Standard)

<ul>
<li>a block cipher with 56-bit key (64-bit including parity bits), 64-bit block

<ul>
<li>the reason for 64-bit: 64-bit is 8 bytes, each character uses 1 byte in the computer, 8 characters means we can use ascii code to represent</li>
<li>parity bits: just like checksum, solving the nosie problem, but today we may not use this</li>
</ul></li>
<li>most commonly use block cipher

<ul>
<li>in 1990s, this method was not safe any more, then generate &quot;triple DES&quot; (1999) and AES (2001, use until now)</li>
</ul></li>
<li>based on &quot;Feistel&quot; network structure

<ul>
<li>means for both encryption and decryptionn use the same hardware</li>
<li>DES use this structure for 16 times, but using different subkey</li>
</ul></li>
<li>designed to facilitate hardware implementation</li>
</ul></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>广告创意内容JD汇总</title>
            <link>https://www.marshalgao.com/%E5%B9%BF%E5%91%8A%E5%88%9B%E6%84%8F%E5%86%85%E5%AE%B9jd%E6%B1%87%E6%80%BB/</link>
            <pubDate>Tue, 20 Oct 2020 16:42:50 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/%E5%B9%BF%E5%91%8A%E5%88%9B%E6%84%8F%E5%86%85%E5%AE%B9jd%E6%B1%87%E6%80%BB/</guid>
            <description>腾讯广告高级创意产品经理  工作职责  负责腾讯广告创意工具的产品策划工作，包括但不限于图片/视频/文案/落地页制作等各类工具 洞察广告创意链条用户痛点，快速高效推进创意平台产品能力建设 对接行业和运营，分析创意产品能力在各行业的诉求、使用情况、推广策略，反哺产品功能设计与迭代节奏 紧跟行业前沿，大胆探索广告创意能力   工作要求  两年以上工作经验，有创意工具、商业化平台相关产品经验者优先 了解广告创意领域，理解创意和广告的关系，有创意优化思路和见解 思维敏捷开阔，有创新意识，追踪业界热点和前沿动态 具备一定统筹能力，善于跨部门沟通，能主动协调资源驱动目标达成 较强的逻辑思维能力，抗压力强，责任心强    中台运营事业部——广告产品专家  岗位描述  负责广告系统的核心能力建设，提升PDB和RTB两条线的流量分发效率 负责广告业务的广告创意管理和媒体对接审核 负责系统整体的平台资源整合和对外开放，提高系统的可扩展性和平台操作效率   岗位要求  5年以上互联网广告产品经验，对程序化广告精通，并有过DSP、SSP、ADX相关经验 对广告平台的规划和设计有深入的理解和丰富的实操经验 对媒体APP有广泛的了解 具备高度的责任心和自驱力，协同运营/技术等兄弟团队共同达成目标，推动产品上线至落地，并持续迭代优化    </description>
            <content type="html"><![CDATA[<h4 id="腾讯广告高级创意产品经理">腾讯广告高级创意产品经理</h4>
<ul>
<li>工作职责
<ul>
<li>负责腾讯广告创意工具的产品策划工作，包括但不限于图片/视频/文案/落地页制作等各类工具</li>
<li>洞察广告创意链条用户痛点，快速高效推进创意平台产品能力建设</li>
<li>对接行业和运营，分析创意产品能力在各行业的诉求、使用情况、推广策略，反哺产品功能设计与迭代节奏</li>
<li>紧跟行业前沿，大胆探索广告创意能力</li>
</ul>
</li>
<li>工作要求
<ul>
<li>两年以上工作经验，有创意工具、商业化平台相关产品经验者优先</li>
<li>了解广告创意领域，理解创意和广告的关系，有创意优化思路和见解</li>
<li>思维敏捷开阔，有创新意识，追踪业界热点和前沿动态</li>
<li>具备一定统筹能力，善于跨部门沟通，能主动协调资源驱动目标达成</li>
<li>较强的逻辑思维能力，抗压力强，责任心强</li>
</ul>
</li>
</ul>
<h4 id="中台运营事业部广告产品专家">中台运营事业部——广告产品专家</h4>
<ul>
<li>岗位描述
<ul>
<li>负责广告系统的核心能力建设，提升PDB和RTB两条线的流量分发效率</li>
<li>负责广告业务的广告创意管理和媒体对接审核</li>
<li>负责系统整体的平台资源整合和对外开放，提高系统的可扩展性和平台操作效率</li>
</ul>
</li>
<li>岗位要求
<ul>
<li>5年以上互联网广告产品经验，对程序化广告精通，并有过DSP、SSP、ADX相关经验</li>
<li>对广告平台的规划和设计有深入的理解和丰富的实操经验</li>
<li>对媒体APP有广泛的了解</li>
<li>具备高度的责任心和自驱力，协同运营/技术等兄弟团队共同达成目标，推动产品上线至落地，并持续迭代优化</li>
</ul>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>产品经理学习路线</title>
            <link>https://www.marshalgao.com/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</link>
            <pubDate>Sun, 18 Oct 2020 11:21:28 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</guid>
            <description></description>
            <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/revised_study2.png" alt=""></p>
]]></content>
        </item>
        
        <item>
            <title>ICOM6012 Transport Layer</title>
            <link>https://www.marshalgao.com/icom6012-transport-layer/</link>
            <pubDate>Thu, 15 Oct 2020 13:50:12 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/icom6012-transport-layer/</guid>
            <description>Transport-layer Services Transport Services and Protocols
 Provide logical communication (actually accomplished by network layer) between app processes on different hosts  logical communication means a pair of hosts is not connected physically, but it seems that they are connected by channel   Transport protocols run in end systems  send side: breaks app messages into segments (if needed), passes to network layer  using segment header, including port number, to communicate with the socket of receiver  receive side: reassembles segemnts into messages, uses segement header (or port number) to pass to application layer  More than one transport protocol available to apps  Majority: TCP and UDP  TCP: reliable, in-order delivery  congestion control flow control connection setup  UDP: unreliable, unordered delivery  no-frills extension of &amp;quot;best-effort&amp;quot; IP   Others: SCTP and DCCP  These protocols are very limited, so we just ignore them.</description>
            <content type="html"><![CDATA[<h2 id="transportlayer-services">Transport-layer Services</h2>

<p><strong>Transport Services and Protocols</strong></p>

<ul>
<li>Provide <strong><em>logical communication</em></strong> (actually accomplished by network layer) between app processes on different hosts

<ul>
<li><strong><em>logical communication</em></strong> means a pair of hosts is not connected physically, but it seems that they are connected by channel
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/IMG_0017.jpeg" alt="logical communication"></figure></li>
</ul></li>
<li>Transport protocols run in end systems

<ul>
<li><strong>send side</strong>: breaks app messages into <strong><em>segments</em></strong> (if needed), passes to network layer

<ul>
<li>using segment header, including port number, to communicate with the socket of receiver</li>
</ul></li>
<li><strong>receive side</strong>: reassembles segemnts into messages, uses segement header (or port number) to pass to application layer</li>
</ul></li>
<li>More than one transport protocol available to apps

<ul>
<li>Majority: <strong>TCP</strong> and <strong>UDP</strong>

<ul>
<li><strong>TCP</strong>: reliable, in-order delivery

<ul>
<li>congestion control</li>
<li>flow control</li>
<li>connection setup</li>
</ul></li>
<li><strong>UDP</strong>: unreliable, unordered delivery

<ul>
<li>no-frills extension of &quot;best-effort&quot; IP</li>
</ul></li>
</ul></li>
<li>Others: SCTP and DCCP

<ul>
<li>These protocols are very limited, so we just ignore them. Unless in specific environment, for example, SCTP would be used in wireless network (e.g. celluar network)</li>
</ul></li>
</ul></li>
<li>Services not available

<ul>
<li>delay guarantee</li>
<li>bandwidth guarantee</li>
<li>throughput guarantee</li>
<li><strong>Q: Why the Internet can not guarantee throughput and so on?</strong></li>
<li>A: Because the data link layer can not guarantee, the network layer can not guarantee. For example, we can use Zoom to meet, but the Internet can not guarantee the quality.</li>
</ul></li>
</ul>

<p><strong>Transport Layer Actions</strong></p>

<ul>
<li>Sender:

<ul>
<li>is passed an application-layer message</li>
<li>determines segment header fields values, including port number

<ul>
<li><strong>not change the pillow, just add a header with some important information</strong></li>
</ul></li>
<li>creates segment</li>
<li>passed segement to IP</li>
</ul></li>
<li>Receiver:

<ul>
<li>receives segment from IP, ensuring the packet has arrived at the correct destination</li>
<li>checks header values</li>
<li>extracts application-layer message</li>
<li>demultiplexes message up to application via socket</li>
</ul></li>
</ul>

<h2 id="multiplexing-and-demultiplexing">Multiplexing and Demultiplexing</h2>

<p><strong>Overview</strong></p>

<ul>
<li>Multiplexing and demultiplexing happen at all layers. For example,

<ul>
<li>application layer &amp; transport Layer -&gt; port number in the TCP and UDP header</li>
<li>transport layer &amp; network layer -&gt; protocol ID in the IP header</li>
<li>network layer &amp; data link layer -&gt; frame type in the Ethernet header, for example.
<br></li>
</ul></li>
</ul>

<p><figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-15%20%E4%B8%8B%E5%8D%884.54.22.png" alt=""></figure></p>

<p><strong>Demultiplexing</strong></p>

<ul>
<li>Host receives IP datagrams (network layer)

<ul>
<li>each datagram has source &amp; destination IP addresses</li>
<li>each datagram carries one transport-layer segment</li>
<li>each segment has source &amp; destination port number (for resending and replying purpose)</li>
</ul></li>
</ul>

<p><figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/IMG_0018.jpeg" alt=""></figure></p>

<ul>
<li><p>Host uses IP addresses &amp; port numbers to direct segment to appropriate socket</p></li>

<li><p>Connectionless Demux (UDP Using destination port number only)</p>

<ul>
<li>Create socket with unique local port number, which is assigned by OS (sender)</li>
<li>When creating datagram to send into UDP socket, must specify (sender)</li>
<li>destination IP address</li>
<li>destination port number</li>
<li>When host receives UDP segment (receiver)</li>
<li>checks destination port number in segment</li>
<li>directs UDP segment to socket with that port number</li>
<li>Others</li>
<li>IP datagrams with <strong>same destination &amp; port number</strong>, but different source IP addresses and/or source port numbers will be directed to <strong>same socket</strong> at destination

<ul>
<li><strong>Q: We call the UDP segment &quot;datagram&quot;, why?</strong></li>
<li>A: Becasue UDP does not improve or enhance the service of network layer.</li>
</ul></li>
<li>share the same socket, but UDP does not care</li>
<li>UDP socket is identified by two-tuple: (dest IP address, dest port number)</li>
</ul></li>
</ul>

<p><figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-18%20%E4%B8%8B%E5%8D%887.57.53.png" alt=""></figure></p>

<ul>
<li>Connection-oriented Demux (Using 4-tuple)

<ul>
<li>TCP socket identified by 4-tuple:</li>
<li>source IP address</li>
<li>source port number</li>
<li>dest IP address</li>
<li>dest port number</li>
<li>Server host may support many simultaneous TCP sockets</li>
<li>each socket is identified by its own 4-tuple</li>
<li>Receiver uses all four values to direct segment to appropriate socket</li>
<li>Web servers have different sockets for each connecting client</li>
<li>Non-persistent HTTP will have different sockets for each request</li>
<li>Others</li>
<li>UDP shares one socket, but TCP has additional sockets</li>
<li>TCP consumes extra resources, such as memory</li>
</ul></li>
</ul>

<p><figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/connection.png" alt=""></figure></p>

<h2 id="connectionless-transport-udp">Connectionless Transport: UDP</h2>

<ul>
<li>Features

<ul>
<li>&quot;no frills&quot;, &quot;bare bones&quot; Internet transport protocol (means get the packets from Internet but do nothing)</li>
<li>&quot;best effort&quot; service, UDP segment may be lost or delivered out-of-order to app</li>
<li>connectionless</li>
<li>no handshaking between UDP senders and receivers</li>
<li>each UDP segment handled independently of others</li>
</ul></li>
<li>The Reason of the Existence of UDP (Advantages)

<ul>
<li>no connection establishment</li>
<li>DNS choose this, due to no additional RTT delay</li>
<li>simple (no connection)</li>
<li>small header size</li>
<li>no congestion control</li>
<li>UDP can blast away as fast as desired</li>
<li>can function in the face of congestion</li>
</ul></li>
<li>Usage

<ul>
<li>streaming multimedia apps (loss tolerant, rate sensitive)</li>
<li>DNS</li>
<li>SNMP</li>
<li>HTTP/3</li>
<li>if used UDP

<ul>
<li>add needed reliability at application layer</li>
<li>add congestion control at application layer</li>
</ul></li>
</ul></li>
<li>Segment

<ul>
<li>length: in bytes of UDP segment, inlcuding header</li>
<li>UDP segment would keep the length of packet below 1500 bytes, in order to avoid being fragmented by router</li>
<li>checksum: for error detection (cannnot dectect all, but majority)</li>
<li>procedure

<ul>
<li>sender</li>
<li>treat segment contents, including header (8 bytes), as sequence of 16-bit integers</li>
<li>checksum: addition (one's complement sum) of segment contents</li>
<li>sender puts checksum value into UDP checksum field</li>
<li>receiver</li>
<li>compute checksum of received segment</li>
<li>check if computed checksum equals checksum field value:

<ul>
<li>no - error detected (two options)</li>
<li>transport layer drop it</li>
<li>transmit to application layer, it would decide the next action</li>
<li>yes - no error detected (but may still have errors)</li>
</ul></li>
</ul></li>
<li>others

<ul>
<li>some implementations allow UDP checksum calculation to be disabled in order to speed up the processing of incoming UDP datagrams
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/111.png" alt=""></figure></li>
</ul></li>
</ul></li>
</ul>

<h2 id="connectionoriented-transport-tcp">Connection-oriented Transport: TCP</h2>

<ul>
<li>Services

<ul>
<li>point-to-point</li>
<li>reliable, in-order byte stream (no message boundaries)

<ul>
<li>using ACK and sequence number to be reliable</li>
<li>ACK and sequence number are byte-stream numbers, not packet number</li>
<li>the sequence number of a segment is the byte-stream number of the first byte in the segment</li>
</ul></li>
<li>full duplex data

<ul>
<li>bi-directional data flow in same connection</li>
<li>MSS: maximum segment size (excluding header)

<ul>
<li>connection specific</li>
<li>two direcrions may have different MSSs</li>
<li>in contrast, UDP has packet size</li>
<li>depends on two issues

<ul>
<li>overhead management</li>
<li>IP fragmentation</li>
</ul></li>
<li>absolute limit: 65495 =<span  class="math">\(\ (2^{16}-1-40)\)</span>

<ul>
<li><span  class="math">\(\ 2^{16}-1\)</span> is IP datagram maximum size</li>
<li>IP header costs 20 bytes, and TCP header costs 20 bytes -&gt; 40 bytes</li>
<li>in practice, it is hard to reach this number</li>
</ul></li>
<li>typically, its value is 1460 bytes (just pillow)

<ul>
<li>TCP header is 20 bytes (min), IP datagram header is 20 bytes (min), Ethernet maximum frame size is 1500 bytes (but up to 8000 bytes in data centre)</li>
</ul></li>
</ul></li>
</ul></li>
<li>cumulative ACKs (in the header)

<ul>
<li>ACK: sequence number of next byte expected from other side</li>
<li>duplicated ACKs means packet loss (then restransmit fastly) or packets out of order</li>
<li>another method to detect packet loss (then restransmit fastly) is timer (using time-out)

<ul>
<li>TCP and UDP both use this
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-19%20%E4%B8%8B%E5%8D%885.32.08.png" alt=""></figure></li>
</ul></li>
</ul></li>
<li>pipelining (means keep talking)

<ul>
<li>unpipelining -&gt; transmit packets one by one, but it is reliable</li>
</ul></li>
<li>connection-oriented</li>
<li>flow control

<ul>
<li>sender will not overwhelm receive buffer</li>
</ul></li>
<li>congestion control

<ul>
<li>focus on router buffer</li>
<li>through window size (key factor)</li>
</ul></li>
<li>others

<ul>
<li>send buffer

<ul>
<li>decide when to send packets</li>
<li>resending purpose</li>
</ul></li>
<li>receive buffer

<ul>
<li>solve the problem of out-of-order packets</li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<p><figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-19%20%E4%B8%8A%E5%8D%8810.40.20.png" alt=""></figure></p>

<ul>
<li>Segment Structure

<ul>
<li>source &amp; dest ports -&gt; mutiplexing &amp; demultiplexing</li>
<li>header length (4 bits)

<ul>
<li><strong>Q: What is the max header size?</strong></li>
<li>A: The TCP header would combine 4 bytes as a union, although header length only has 4 bits (15), the max header size is 60 bytes. Because TCP also has &quot;option&quot; in the header, there are 20 bytes except for &quot;options&quot;.</li>
</ul></li>
<li>C, E (for newer protocols, explicit congestion control, we can just ignore them)</li>
<li>U (seldomly used)

<ul>
<li>if U equals 1, the pillow contains two types of data

<ul>
<li>urgent data

<ul>
<li>start from the first byte to the urgent data pointer</li>
</ul></li>
<li>original data</li>
</ul></li>
<li>the boundary of above two types of data is indicated by urgent data pointer</li>
</ul></li>
<li>P, means push quickly

<ul>
<li>the client would not transmit a packet to application layer when the transport layer receives the packet immediately</li>
<li>packets would be save in the buffer, until the value of P equals 1, packets would be transmitted to the application layer together (buffer would be empty at the same time)</li>
</ul></li>
<li>R, S, F

<ul>
<li>RST: if the client or server crashes, make R as 1 to reset everything</li>
<li>SYN: connection request</li>
<li>FIN: finish my connection (finsh connections on both sides)</li>
</ul></li>
</ul></li>
</ul>

<p><figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-19%20%E4%B8%8A%E5%8D%8811.27.01.png" alt=""></figure></p>

<ul>
<li>Reliable Data Transfer

<ul>
<li>window size

<ul>
<li>best N: determined by congestion control

<ul>
<li><strong>Q: How receiver handles out-of-order segments?</strong></li>
<li>A: TCP spec does not say, up to implementor.
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-19%20%E4%B8%8B%E5%8D%884.34.24.png" alt=""></figure></li>
</ul></li>
</ul></li>
<li>TCP round trip time, timeout

<ul>
<li>timer would be put in the oldest packet</li>
<li>timeout value

<ul>
<li>longer than RTT, but RTT varies</li>
<li>too short: premature timeout, unnecessary retransmissions</li>
<li>too long: slow reaction to segment loss</li>
</ul></li>
<li>estimate RTT

<ul>
<li>SampleRTT: measured time from segment transmission until ACK receipt

<ul>
<li>ignore retransmissions</li>
<li>SampleRTT will vary, want estimated RTT &quot;smoother&quot;

<ul>
<li>average several recent measurements, not just current SampleRTT</li>
</ul></li>
</ul></li>
<li>EstimatedRTT =<span  class="math">\(\ (1-\alpha)\times\)</span>EstimatedRTT + <span  class="math">\(\alpha\times\)</span>SampleRTT

<ul>
<li>exponential weighted moving average (EWMA)</li>
<li>influence of past sample decreases exponentially fast</li>
<li>typcial value: <span  class="math">\(\alpha\)</span> = 0.125</li>
<li>EstimatedRTT just like average RTT, SampleRTT just like current RTT, we can combine them to update EstimatedRTT
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-19%20%E4%B8%8B%E5%8D%885.03.25.png" alt=""></figure></li>
</ul></li>
</ul></li>
<li>timeout interval: EstimatedRTT plus &quot;safety margin&quot;

<ul>
<li>large variation in EstimatedRTT: want a larger safety margin</li>
<li>TimeoutInterval = EstimatedRTT + 4<span  class="math">\(\times\)</span>DevRTT

<ul>
<li>DevRTT (safety margin): EWMA of SampleRTT deviation from EstimatedRTT</li>
<li>DevRTT = (1 - <span  class="math">\(\beta\)</span>)<span  class="math">\(\times\)</span>DevRTT + <span  class="math">\(\beta\times\)</span>|SampleRTT - EstimatedRTT|

<ul>
<li><span  class="math">\(\beta\)</span> = 0.25</li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li>TCP fast retransmit

<ul>
<li>due to lots of experiments, 3 duplicated ACKs are the best option
<figure><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-19%20%E4%B8%8B%E5%8D%885.38.49.png" alt=""></figure></li>
</ul></li>
<li>advantages of delayed ACK

<ul>
<li>wait up to 500ms for next segment and send a ACK for several segments to save</li>
<li>save dedicated ACK (no pillow, just header)</li>
</ul></li>
</ul></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>LeetCode[1] Two Sum</title>
            <link>https://www.marshalgao.com/leetcode1-two-sum/</link>
            <pubDate>Wed, 07 Oct 2020 18:24:14 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/leetcode1-two-sum/</guid>
            <description>Question: Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Example 1: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Output: Because nums[0] + nums[1] == 9, we return [0, 1].</description>
            <content type="html"><![CDATA[<h2 id="question">Question:</h2>

<p align="justify">Given an array of integers <b>nums</b> and an integer <b>target</b>, return <i>indices of the two numbers such that they add up to <b>target</b></i>.</p>

<p align="justify">You may assume that each input would have <strong><i>exactly</i> one solution</strong>, and you may not use the <i>same</i> element twice.</p>

<p>You can return the answer in any order.</p>

<h2 id="example-1">Example 1:</h2>
<pre><code>Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].</code></pre>
<h2 id="example-2">Example 2:</h2>
<pre><code>Input: nums = [3,2,4], target = 6
Output: [1,2] </code></pre>
<h2 id="example-3">Example 3:</h2>
<pre><code>Input: nums = [3,3], target = 6
Output: [0,1]</code></pre>
<h2 id="constraints">Constraints:</h2>

<ul>
<li>2 <span  class="math">\(\leq\)</span> nums.length <span  class="math">\(\leq 10^5\)</span></li>
<li><span  class="math">\(-10^9 \leq\)</span> nums[i] <span  class="math">\(\leq 10^9\)</span></li>
<li><span  class="math">\(-10^9 \leq\)</span> target <span  class="math">\(\leq 10^9\)</span></li>
<li><strong>Only one valid answer exists.</strong></li>
</ul>

<h2 id="my-interesting-code">My Interesting Code:</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Solution</span>(object):
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">twoSum</span>(self, nums, target):
        <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">        :type nums: List[int]
</span><span style="color:#e6db74">        :type target: int
</span><span style="color:#e6db74">        :rtype: List[int]
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> nums:
            temp <span style="color:#f92672">=</span> nums[:nums<span style="color:#f92672">.</span>index(i):] <span style="color:#f92672">+</span> nums[nums<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>::]
            <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> temp:
                <span style="color:#66d9ef">if</span> i <span style="color:#f92672">+</span> j <span style="color:#f92672">==</span> target:
                    result_1 <span style="color:#f92672">=</span> nums<span style="color:#f92672">.</span>index(i)
                    nums<span style="color:#f92672">.</span>remove(i)
                    result_2 <span style="color:#f92672">=</span> nums<span style="color:#f92672">.</span>index(j) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
                    <span style="color:#66d9ef">return</span> list((result_1, result_2))</code></pre></div>
<h2 id="my-perspective-chinese-only">My Perspective (Chinese Only)</h2>

<p align="justify">之所以是interesting的代码，是因为个人擅长使用暴力拆解。所以在LeetCode的所有习题中，在保证通过的情况下，个人会优先考虑暴力拆解。暴力拆解的优势在于代码易于理解，但是其时间复杂度和空间复杂度较高。</p>

<p align="justify">首先，我们先依次遍历列表nums。以第一个Example为例，当我们取出数字2后，为了寻找符合target的元素，我们只需遍历除了数字2以外的元素即可。那么如何获取除了数字2以外的元素？Python自带的切片(split)可以很好的解决这个问题。所以，下面先来学习一下切片。</p>

<p align="justify">一个完整的切片表达式包含两个“:”，用于分隔三个参数(start_index、end_index、step)。当只有一个“:”时，默认第三个参数step=1；当一个“:”也没有时，start_index=end_index，表示切取start_index指定的那个元素。</p>

<p align="justify">step：正负数均可，其绝对值大小决定了切取数据时的“步长”，而正负号决定了“切取方向”，正表示“从左往右”取值，负表示“从右往左”取值。当step省略时，默认为1，即从左往右以步长1取值。</p>

<p align="justify">start_index：表示起始索引（包含该索引对应值）；该参数省略时，表示从对象“端点”开始取值，至于是从“起点”还是从“终点”开始，则由step参数的正负决定，step为正从“起点”开始，为负从“终点”开始。</p>

<p align="justify">end_index：表示终止索引（不包含该索引对应值）；该参数省略时，表示一直取到数据“端点”，至于是到“起点”还是到“终点”，同样由step参数的正负决定，step为正时直到“终点”，为负时直到“起点”。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">nums <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>]
<span style="color:#f92672">&gt;&gt;</span>nums[<span style="color:#ae81ff">0</span>: <span style="color:#ae81ff">2</span>:] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>]
<span style="color:#f92672">&gt;&gt;</span>nums[<span style="color:#ae81ff">1</span>: <span style="color:#ae81ff">3</span>: <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> []
<span style="color:#f92672">&gt;&gt;</span>nums[: <span style="color:#ae81ff">2</span>: <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">4</span>]
<span style="color:#f92672">&gt;&gt;</span>nums[::] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>]
<span style="color:#f92672">&gt;&gt;</span>nums[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span>]</code></pre></div>
<p align="justify">学习好切片后，我们接着以第一个Example为例说明。当取出数字2后，利用切片，将nums中除了数字2以外的元素全部取出，组成新的列表temp。将temp中的每一个元素与数字2相加，如果结果等于target，便将两个元素的索引返回。注意，这里的元素索引应为nums中的元素索引值。特别地，在返回list时，小括号需用两层进行嵌套，否则会造成结果错误。</p>

<p align="justify">本题所采用的暴力拆解是一种易于理解，基于穷举并完全遍历的思想，会造成一定的时间和空间浪费，但由于Python的切片是基于for循环的一种优化，所以代码效率相较于纯for循环来说，要好很多。</p>
]]></content>
        </item>
        
        <item>
            <title>Vlog 2 Quarantine Diary</title>
            <link>https://www.marshalgao.com/vlog-2-quarantine-diary/</link>
            <pubDate>Wed, 02 Sep 2020 14:12:35 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/vlog-2-quarantine-diary/</guid>
            <description>   疫情期间赴港上学隔离14天的生活即将结束，刚刚上完第一节课，视频传传好，我要冲了，努力学习！ 再次感谢小刘同学提供的BGM，期望以后可以持续输出！ </description>
            <content type="html"><![CDATA[<div class="iframe-container">
    <iframe src="https://player.bilibili.com/player.html?aid=839485025&bvid=BV1S54y127AP&cid=231463415&page=1" allowfullscreen> </iframe>
</div>
<hr>
<h5 id="疫情期间赴港上学隔离14天的生活即将结束刚刚上完第一节课视频传传好我要冲了努力学习">疫情期间赴港上学隔离14天的生活即将结束，刚刚上完第一节课，视频传传好，我要冲了，努力学习！</h5>
<h5 id="再次感谢小刘同学提供的bgm期望以后可以持续输出">再次感谢小刘同学提供的BGM，期望以后可以持续输出！</h5>
]]></content>
        </item>
        
        <item>
            <title>Vlog 1  New Arrival</title>
            <link>https://www.marshalgao.com/vlog-1-new-arrival/</link>
            <pubDate>Sun, 23 Aug 2020 14:44:52 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/vlog-1-new-arrival/</guid>
            <description>   疫情期间赴香港隔离，一路上新奇拍拍拍。要开始读书了，冲！ 特别感谢小刘同学提供的BGM，在这里夸赞一下她的歌品！ </description>
            <content type="html"><![CDATA[<div class="iframe-container">
    <iframe src="https://player.bilibili.com/player.html?aid=499308002&bvid=BV1QK411T7CR&cid=227836652&page=1" allowfullscreen> </iframe>
</div>
<hr>
<h5 id="疫情期间赴香港隔离一路上新奇拍拍拍要开始读书了冲">疫情期间赴香港隔离，一路上新奇拍拍拍。要开始读书了，冲！</h5>
<h5 id="特别感谢小刘同学提供的bgm在这里夸赞一下她的歌品">特别感谢小刘同学提供的BGM，在这里夸赞一下她的歌品！</h5>
]]></content>
        </item>
        
    </channel>
</rss>
