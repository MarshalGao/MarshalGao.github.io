<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on This is Marshal</title>
        <link>https://www.marshalgao.com/posts/</link>
        <description>Recent content in Posts on This is Marshal</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://www.hku.hk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The University of Hong Kong&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 18 Oct 2020 11:21:28 +0800</lastBuildDate>
        <atom:link href="https://www.marshalgao.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>产品经理学习路线</title>
            <link>https://www.marshalgao.com/posts/2020/10/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</link>
            <pubDate>Sun, 18 Oct 2020 11:21:28 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/posts/2020/10/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</guid>
            <description></description>
            <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/revised_study2.png" alt=""></p>
]]></content>
        </item>
        
        <item>
            <title>ICOM6012 Transport Layer</title>
            <link>https://www.marshalgao.com/posts/2020/10/icom6012-transport-layer/</link>
            <pubDate>Thu, 15 Oct 2020 13:50:12 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/posts/2020/10/icom6012-transport-layer/</guid>
            <description>Transport-layer Services Transport Services and Protocols
 Provide logical communication (actually accomplished by network layer) between app processes on different hosts  logical communication means a pair of hosts is not connected physically, but it seems that they are connected by channel    Transport protocols run in end systems  send side: breaks app messages into segments (if needed), passes to network layer  using segment header, including port number, to communicate with the socket of receiver   receive side: reassembles segemnts into messages, uses segement header (or port number) to pass to application layer   More than one transport protocol available to apps  Majority: TCP and UDP  TCP: reliable, in-order delivery  congestion control flow control connection setup   UDP: unreliable, unordered delivery  no-frills extension of &amp;ldquo;best-effort&amp;rdquo; IP     Others: SCTP and DCCP  These protocols are very limited, so we just ignore them.</description>
            <content type="html"><![CDATA[<h2 id="transport-layer-services">Transport-layer Services</h2>
<p><strong>Transport Services and Protocols</strong></p>
<ul>
<li>Provide <em><strong>logical communication</strong></em> (actually accomplished by network layer) between app processes on different hosts
<ul>
<li><em><strong>logical communication</strong></em> means a pair of hosts is not connected physically, but it seems that they are connected by channel
<img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/IMG_0017.jpeg" alt="logical communication"></li>
</ul>
</li>
<li>Transport protocols run in end systems
<ul>
<li><strong>send side</strong>: breaks app messages into <em><strong>segments</strong></em> (if needed), passes to network layer
<ul>
<li>using segment header, including port number, to communicate with the socket of receiver</li>
</ul>
</li>
<li><strong>receive side</strong>: reassembles segemnts into messages, uses segement header (or port number) to pass to application layer</li>
</ul>
</li>
<li>More than one transport protocol available to apps
<ul>
<li>Majority: <strong>TCP</strong> and <strong>UDP</strong>
<ul>
<li><strong>TCP</strong>: reliable, in-order delivery
<ul>
<li>congestion control</li>
<li>flow control</li>
<li>connection setup</li>
</ul>
</li>
<li><strong>UDP</strong>: unreliable, unordered delivery
<ul>
<li>no-frills extension of &ldquo;best-effort&rdquo; IP</li>
</ul>
</li>
</ul>
</li>
<li>Others: SCTP and DCCP
<ul>
<li>These protocols are very limited, so we just ignore them. Unless in specific environment, for example, SCTP would be used in wireless network (eg. celluar network)</li>
</ul>
</li>
</ul>
</li>
<li>Services not available
<ul>
<li>delay guarantee</li>
<li>bandwidth guarantee</li>
<li>throughput guarantee
<ul>
<li><strong>Q: Why the Internet can not guarantee throughput and so on?</strong></li>
<li>A: Because the data link layer can not guarantee, the network layer can not guarantee. For example, we can use Zoom to meet, but the Internet can not guarantee the quality.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Transport Layer Actions</strong></p>
<ul>
<li>Sender:
<ul>
<li>is passed an application-layer message</li>
<li>determines segment header fields values, including port number
<ul>
<li><strong>not change the pillow, just add a header with some important information</strong></li>
</ul>
</li>
<li>creates segment</li>
<li>passed segement to IP</li>
</ul>
</li>
<li>Receiver:
<ul>
<li>receives segment from IP, ensuring the packet has arrived at the correct destination</li>
<li>checks header values</li>
<li>extracts application-layer message</li>
<li>demultiplexes message up to application via socket</li>
</ul>
</li>
</ul>
<h2 id="multiplexing-and-demultiplexing">Multiplexing and Demultiplexing</h2>
<p><strong>Overview</strong></p>
<ul>
<li>Multiplexing and demultiplexing happen at all layers. For example,
<ul>
<li>application layer &amp; transport Layer -&gt; port number in the TCP and UDP header</li>
<li>transport layer &amp; network layer -&gt; protocol ID in the IP header</li>
<li>network layer &amp; data link layer -&gt; frame type in the Ethernet header, for example.</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-15%20%E4%B8%8B%E5%8D%884.54.22.png" alt=""></p>
<p><strong>Demultiplexing</strong></p>
<ul>
<li>Host receives IP datagrams (network layer)
<ul>
<li>each datagram has source &amp; destination IP addresses</li>
<li>each datagram carries one transport-layer segment</li>
<li>each segment has source &amp; destination port number (for resending and replying purpose)</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/IMG_0018.jpeg" alt=""></p>
<ul>
<li>
<p>Host uses IP addresses &amp; port numbers to direct segment to appropriate socket</p>
</li>
<li>
<p>Connectionless Demux (UDP Using destination port number only)</p>
<ul>
<li>Create socket with unique local port number, which is assigned by OS (sender)</li>
<li>When creating datagram to send into UDP socket, must specify (sender)
<ul>
<li>destination IP address</li>
<li>destination port number</li>
</ul>
</li>
<li>When host receives UDP segment (receiver)
<ul>
<li>checks destination port number in segment</li>
<li>directs UDP segment to socket with that port number</li>
</ul>
</li>
<li>Others
<ul>
<li>IP datagrams with <strong>same destination &amp; port number</strong>, but different source IP addresses and/or source port numbers will be directed to <strong>same socket</strong> at destination
<ul>
<li><strong>Q: We call the UDP segment &ldquo;datagram&rdquo;, why?</strong></li>
<li>A: Becasue UDP does not improve or enhance the service of network layer.</li>
</ul>
</li>
<li>share the same socket, but UDP does not care</li>
<li>UDP socket is identified by two-tuple: (dest IP address, dest port number)</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/%E6%88%AA%E5%B1%8F2020-10-18%20%E4%B8%8B%E5%8D%887.57.53.png" alt=""></p>
<ul>
<li>Connection-oriented Demux (Using 4-tuple)
<ul>
<li>TCP socket identified by 4-tuple:
<ul>
<li>source IP address</li>
<li>source port number</li>
<li>dest IP address</li>
<li>dest port number</li>
</ul>
</li>
<li>Server host may support many simultaneous TCP sockets
<ul>
<li>each socket is identified by its own 4-tuple</li>
</ul>
</li>
<li>Receiver uses all four values to direct segment to appropriate socket</li>
<li>Web servers have different sockets for each connecting client
<ul>
<li>Non-persistent HTTP will have different sockets for each request</li>
</ul>
</li>
<li>Others
<ul>
<li>UDP shares one socket, but TCP has additional sockets</li>
<li>TCP consumes extra resources, such as memory</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/connection.png" alt=""></p>
<h2 id="connectionless-transport-udp">Connectionless Transport: UDP</h2>
<ul>
<li>Features
<ul>
<li>&ldquo;no frills&rdquo;, &ldquo;bare bones&rdquo; Internet transport protocol (means get the packets from Internet but do nothing)</li>
<li>&ldquo;best effort&rdquo; service, UDP segment may be lost or delivered out-of-order to app</li>
<li>connectionless
<ul>
<li>no handshaking between UDP senders and receivers</li>
<li>each UDP segment handled independently of others</li>
</ul>
</li>
</ul>
</li>
<li>The Reason of the Existence of UDP (Advantages)
<ul>
<li>no connection establishment
<ul>
<li>DNS choose this, due to no additional RTT delay</li>
</ul>
</li>
<li>simple (no connection)</li>
<li>small header size</li>
<li>no congestion control
<ul>
<li>UDP can blast away as fast as desired</li>
<li>can function in the face of congestion</li>
</ul>
</li>
</ul>
</li>
<li>Usage
<ul>
<li>streaming multimedia apps (loss tolerant, rate sensitive)</li>
<li>DNS</li>
<li>SNMP</li>
<li>HTTP/3
<ul>
<li>if used UDP
<ul>
<li>add needed reliability at application layer</li>
<li>add congestion control at application layer</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Segment
<ul>
<li>length: in bytes of UDP segment, inlcuding header
<ul>
<li>UDP segment would keep the length of packet below 1500 bytes, in order to avoid being fragmented by router</li>
</ul>
</li>
<li>checksum: for error detection (cannnot dectect all, but majority)
<ul>
<li>procedure
<ul>
<li>sender
<ul>
<li>treat segment contents, including header, as sequence of 16-bit integers</li>
<li>checksum: addition (one&rsquo;s complement sum) of segment contents</li>
<li>sender puts checksum value into UDP checksum field</li>
</ul>
</li>
<li>receiver
<ul>
<li>compute checksum of received segment</li>
<li>check if computed checksum equals checksum field value:
<ul>
<li>no - error detected (two options)
<ul>
<li>transport layer drop it</li>
<li>transmit to application layer, it would decide the next action</li>
</ul>
</li>
<li>yes - no error detected (but may still have errors)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>others
<ul>
<li>some implementations allow UDP checksum calculation to be disabled in order to speed up the processing of incoming UDP datagrams
<img src="https://raw.githubusercontent.com/MarshalGao/image_hosting/master/hugo_images/111.png" alt=""></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="connection-oriented-transport-tcp">Connection-oriented Transport: TCP</h2>
<ul>
<li>Overview</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>New</title>
            <link>https://www.marshalgao.com/posts/2020/10/new/</link>
            <pubDate>Sat, 10 Oct 2020 19:52:36 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/posts/2020/10/new/</guid>
            <description>Bitcoin and Cryptocurrency Technologies Lecture 1 Introduction to Crypto and Cryptocurrencies Hash Function
 Takes any string as input Fixed-size output Efficiently computable  Security Properties
 Collision-free  Nobody can find x and y such as &amp;ldquo;x!=y and H(x)=H(y)&amp;quot;   Hiding  Given H(x), it&amp;rsquo;s infeasible to find x   Puzzle-friendly  For every possible output value y, if k is chosen from a distribution with high min-entropy, then it&amp;rsquo;s infeasible to find x such as H(k|x)=y    SHA-256 Hash Function</description>
            <content type="html"><![CDATA[<h1 id="bitcoin-and-cryptocurrency-technologies">Bitcoin and Cryptocurrency Technologies</h1>
<h2 id="lecture-1-introduction-to-crypto-and-cryptocurrencies">Lecture 1 Introduction to Crypto and Cryptocurrencies</h2>
<p><strong>Hash Function</strong></p>
<ul>
<li>Takes any string as input</li>
<li>Fixed-size output</li>
<li>Efficiently computable</li>
</ul>
<p><strong>Security Properties</strong></p>
<ul>
<li>Collision-free
<ul>
<li>Nobody can find x and y such as <em>&ldquo;x!=y and H(x)=H(y)&quot;</em></li>
</ul>
</li>
<li>Hiding
<ul>
<li>Given H(x), it&rsquo;s infeasible to find x</li>
</ul>
</li>
<li>Puzzle-friendly
<ul>
<li>For every possible output value y, if k is chosen from a distribution with high min-entropy, then it&rsquo;s infeasible to find x such as <em>H(k|x)=y</em></li>
</ul>
</li>
</ul>
<p><strong>SHA-256 Hash Function</strong></p>
<p><img src="https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/sha256_hash_function.png" alt="sha256_hash_function"></p>
<p><em>Theorem: If c is collision-free, then SHA-256 is collision-free</em></p>
<p><strong>Hash Pointer</strong></p>
<ul>
<li>Where some info is stored</li>
<li>Cryptographic hash of the info</li>
</ul>
<p><img src="https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/hash_pointer.png" alt="hash_pointer"></p>
<p><strong>Merkle Trees</strong></p>
<ul>
<li>The root hash can verify membership in O(log n) time/space</li>
</ul>
<p><img src="https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/merkle_trees.png" alt="merkle_trees"></p>
<p><strong>Digital Signature</strong></p>
<ul>
<li>Only you can sign, but anyone can verify</li>
<li>Signature is tied to a particular document
<ul>
<li>verify(public key, message, sign(secret key, message)) == true</li>
</ul>
</li>
<li>&ldquo;can&rsquo;t forge signatures&rdquo;
<ul>
<li>knows public key</li>
<li>knows signature</li>
</ul>
</li>
<li>Relies on hairy math</li>
<li>Good randomness is essential</li>
<li>Bitcoin use ECDSA(Elliptic Curve Digital Signature Algorithm) standard</li>
</ul>
<p><strong>Public Key As An Identity</strong></p>
<ul>
<li>Create a new, random key-pair (secret key, public key)
<ul>
<li>Public key is the public &ldquo;name&rdquo; you can use</li>
<li>Secret key lets you &ldquo;speak for&rdquo; the identity</li>
</ul>
</li>
</ul>
<p><strong>Privacy</strong></p>
<ul>
<li>Addresses not directly connected to real-world identity</li>
<li>Observer can link together an address&rsquo;s activity over time, make inferences</li>
</ul>
<p><strong>A Simple Cryptocurrency - Scrooge Coin</strong></p>
<ul>
<li>Create Coins
<ul>
<li><img src="https://raw.githubusercontent.com/pseudoyu/image_hosting/master/hugo_images/create_coins.png" alt="create_coins"></li>
</ul>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>[1] Two Sum</title>
            <link>https://www.marshalgao.com/posts/2020/10/1-two-sum/</link>
            <pubDate>Wed, 07 Oct 2020 18:24:14 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/posts/2020/10/1-two-sum/</guid>
            <description>Question: Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Example 1: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Output: Because nums[0] + nums[1] == 9, we return [0, 1].</description>
            <content type="html"><![CDATA[<h2 id="question">Question:</h2>

<p align="justify">Given an array of integers <b>nums</b> and an integer <b>target</b>, return <i>indices of the two numbers such that they add up to <b>target</b></i>.</p>

<p align="justify">You may assume that each input would have <strong><i>exactly</i> one solution</strong>, and you may not use the <i>same</i> element twice.</p>

<p>You can return the answer in any order.</p>

<h2 id="example-1">Example 1:</h2>
<pre><code>Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].</code></pre>
<h2 id="example-2">Example 2:</h2>
<pre><code>Input: nums = [3,2,4], target = 6
Output: [1,2] </code></pre>
<h2 id="example-3">Example 3:</h2>
<pre><code>Input: nums = [3,3], target = 6
Output: [0,1]</code></pre>
<h2 id="constraints">Constraints:</h2>

<ul>
<li>2 <span  class="math">\(\leq\)</span> nums.length <span  class="math">\(\leq 10^5\)</span></li>
<li><span  class="math">\(-10^9 \leq\)</span> nums[i] <span  class="math">\(\leq 10^9\)</span></li>
<li><span  class="math">\(-10^9 \leq\)</span> target <span  class="math">\(\leq 10^9\)</span></li>
<li><strong>Only one valid answer exists.</strong></li>
</ul>

<h2 id="my-interesting-code">My Interesting Code:</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Solution</span>(object):
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">twoSum</span>(self, nums, target):
        <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">        :type nums: List[int]
</span><span style="color:#e6db74">        :type target: int
</span><span style="color:#e6db74">        :rtype: List[int]
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> nums:
            temp <span style="color:#f92672">=</span> nums[:nums<span style="color:#f92672">.</span>index(i):] <span style="color:#f92672">+</span> nums[nums<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>::]
            <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> temp:
                <span style="color:#66d9ef">if</span> i <span style="color:#f92672">+</span> j <span style="color:#f92672">==</span> target:
                    result_1 <span style="color:#f92672">=</span> nums<span style="color:#f92672">.</span>index(i)
                    nums<span style="color:#f92672">.</span>remove(i)
                    result_2 <span style="color:#f92672">=</span> nums<span style="color:#f92672">.</span>index(j) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
                    <span style="color:#66d9ef">return</span> list((result_1, result_2))</code></pre></div>
<h2 id="my-perspective-chinese-only">My Perspective (Chinese Only)</h2>

<p align="justify">之所以是interesting的代码，是因为个人擅长使用暴力拆解。所以在LeetCode的所有习题中，在保证通过的情况下，个人会优先考虑暴力拆解。暴力拆解的优势在于代码易于理解，但是其时间复杂度和空间复杂度较高。</p>

<p align="justify">首先，我们先依次遍历列表nums。以第一个Example为例，当我们取出数字2后，为了寻找符合target的元素，我们只需遍历除了数字2以外的元素即可。那么如何获取除了数字2以外的元素？Python自带的切片(split)可以很好的解决这个问题。所以，下面先来学习一下切片。</p>

<p align="justify">一个完整的切片表达式包含两个“:”，用于分隔三个参数(start_index、end_index、step)。当只有一个“:”时，默认第三个参数step=1；当一个“:”也没有时，start_index=end_index，表示切取start_index指定的那个元素。</p>

<p align="justify">step：正负数均可，其绝对值大小决定了切取数据时的“步长”，而正负号决定了“切取方向”，正表示“从左往右”取值，负表示“从右往左”取值。当step省略时，默认为1，即从左往右以步长1取值。</p>

<p align="justify">start_index：表示起始索引（包含该索引对应值）；该参数省略时，表示从对象“端点”开始取值，至于是从“起点”还是从“终点”开始，则由step参数的正负决定，step为正从“起点”开始，为负从“终点”开始。</p>

<p align="justify">end_index：表示终止索引（不包含该索引对应值）；该参数省略时，表示一直取到数据“端点”，至于是到“起点”还是到“终点”，同样由step参数的正负决定，step为正时直到“终点”，为负时直到“起点”。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">nums <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>]
<span style="color:#f92672">&gt;&gt;</span>nums[<span style="color:#ae81ff">0</span>: <span style="color:#ae81ff">2</span>:] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>]
<span style="color:#f92672">&gt;&gt;</span>nums[<span style="color:#ae81ff">1</span>: <span style="color:#ae81ff">3</span>: <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> []
<span style="color:#f92672">&gt;&gt;</span>nums[: <span style="color:#ae81ff">2</span>: <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">4</span>]
<span style="color:#f92672">&gt;&gt;</span>nums[::] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>]
<span style="color:#f92672">&gt;&gt;</span>nums[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">1</span>]</code></pre></div>
<p align="justify">学习好切片后，我们接着以第一个Example为例说明。当取出数字2后，利用切片，将nums中除了数字2以外的元素全部取出，组成新的列表temp。将temp中的每一个元素与数字2相加，如果结果等于target，便将两个元素的索引返回。注意，这里的元素索引应为nums中的元素索引值。特别地，在返回list时，小括号需用两层进行嵌套，否则会造成结果错误。</p>

<p align="justify">本题所采用的暴力拆解是一种易于理解，基于穷举并完全遍历的思想，会造成一定的时间和空间浪费，但由于Python的切片是基于for循环的一种优化，所以代码效率相较于纯for循环来说，要好很多。</p>
]]></content>
        </item>
        
        <item>
            <title>Vlog 2 Quarantine Diary</title>
            <link>https://www.marshalgao.com/posts/2020/09/vlog-2-quarantine-diary/</link>
            <pubDate>Wed, 02 Sep 2020 14:12:35 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/posts/2020/09/vlog-2-quarantine-diary/</guid>
            <description>   疫情期间赴港上学隔离14天的生活即将结束，刚刚上完第一节课，视频传传好，我要冲了，努力学习！ 再次感谢小刘同学提供的BGM，期望以后可以持续输出！ </description>
            <content type="html"><![CDATA[<div class="iframe-container">
    <iframe src="https://player.bilibili.com/player.html?aid=839485025&bvid=BV1S54y127AP&cid=231463415&page=1" allowfullscreen> </iframe>
</div>
<hr>
<h5 id="疫情期间赴港上学隔离14天的生活即将结束刚刚上完第一节课视频传传好我要冲了努力学习">疫情期间赴港上学隔离14天的生活即将结束，刚刚上完第一节课，视频传传好，我要冲了，努力学习！</h5>
<h5 id="再次感谢小刘同学提供的bgm期望以后可以持续输出">再次感谢小刘同学提供的BGM，期望以后可以持续输出！</h5>
]]></content>
        </item>
        
        <item>
            <title>Vlog 1  New Arrival</title>
            <link>https://www.marshalgao.com/posts/2020/08/vlog-1-new-arrival/</link>
            <pubDate>Sun, 23 Aug 2020 14:44:52 +0800</pubDate>
            
            <guid>https://www.marshalgao.com/posts/2020/08/vlog-1-new-arrival/</guid>
            <description>   疫情期间赴香港隔离，一路上新奇拍拍拍。要开始读书了，冲！ 特别感谢小刘同学提供的BGM，在这里夸赞一下她的歌品！ </description>
            <content type="html"><![CDATA[<div class="iframe-container">
    <iframe src="https://player.bilibili.com/player.html?aid=499308002&bvid=BV1QK411T7CR&cid=227836652&page=1" allowfullscreen> </iframe>
</div>
<hr>
<h5 id="疫情期间赴香港隔离一路上新奇拍拍拍要开始读书了冲">疫情期间赴香港隔离，一路上新奇拍拍拍。要开始读书了，冲！</h5>
<h5 id="特别感谢小刘同学提供的bgm在这里夸赞一下她的歌品">特别感谢小刘同学提供的BGM，在这里夸赞一下她的歌品！</h5>
]]></content>
        </item>
        
    </channel>
</rss>
