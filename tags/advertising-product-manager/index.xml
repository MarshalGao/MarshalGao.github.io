<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>advertising product manager on This Is Marshal</title>
    <link>https://www.marshalgao.com/tags/advertising-product-manager/</link>
    <description>Recent content in advertising product manager on This Is Marshal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://www.hku.hk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The University of Hong Kong&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 11 Jan 2021 15:00:18 +0800</lastBuildDate><atom:link href="https://www.marshalgao.com/tags/advertising-product-manager/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Principles of Advertising Algorithms</title>
      <link>https://www.marshalgao.com/principles-of-advertising-algorithms/</link>
      <pubDate>Mon, 11 Jan 2021 15:00:18 +0800</pubDate>
      
      <guid>https://www.marshalgao.com/principles-of-advertising-algorithms/</guid>
      <description>本文将以Google和Fackbook的竞价系统为主线，阐述其内在的算法原理。
竞价系统
 GSP（Generalized Second Price  Google采用的竞价方式  GSP &amp;amp; VCG（Vickrey-Clarke-Groves）  Facebook采用的竞价方式   GSP
简而言之就是按照下一位出价来进行实际扣费，为了鼓励广告主提高素材、广告点击率。
\[cost=next price\times\frac{next\ quality}{current\ quality}+0.01\]
举例说明：
   广告位 平均每小时点击量 广告主 出价（CPC）     1 200 A 10   2 100 B 4   null null C 2    按照上表，此时A的出价为4.01，B的出价为2.01，C竞价失败。
变化一：
如果A出价$7（少于A认为这个广告本身的价值），B出价$8（多于B认为这个广告的价值），则B就会以$7.01拍得第一个广告位，但是这比预想多了$3.01。
变化二：
如果A出价$3.5，B出价$3，那么A就会以$3.01拍得第一个广告位。但如果B出价$3.6，B会以$3.51拍得第一个广告位，并且节省了$0.49。
有这样一个场景，A的真实出价是$10，B出不起那么高的价格，那么B会认为既然得不到那就同归于尽，于是出价$9.99，这样A没有得到一点便宜。这种恶意竞价对双方都不友好。
为了解决上述问题，Google在系统里引入了质量得分的因素，质量得分的关键是CTR（ClickThrough Rate）。显然，在竞价排名时，不仅要考虑价格，还要考虑综合竞价、点击率、广告相关性、广告账户历史等等。
GSP是一种稳定的竞价方式，可操作性很强，现阶段很多互联网广告平台都采用这种竞价方式。但GSP的不足之处在于，竞价的结果不一定是全局最优化的，于是VCG竞价算法出现了。
VCG
基本原理就是广告主为参加拍卖过程中给别的广告主带来的损失之和来买单定价。
举例说明：
   广告位 平均每小时点击量 广告主 出价（CPC）     1 200 A 10   2 100 B 4   null null C 2    A不参加竞价，B和C的总费用为\(4\times200+2\times100=1000\)。</description>
    </item>
    
    <item>
      <title>Entertainment Industry Development</title>
      <link>https://www.marshalgao.com/entertainment-industry-development/</link>
      <pubDate>Mon, 11 Jan 2021 13:50:25 +0800</pubDate>
      
      <guid>https://www.marshalgao.com/entertainment-industry-development/</guid>
      <description>文娱行业发展概况
 受疫情和移动互联网的影响，文娱行业现为线上、线下结合的模式 文娱行业前景可观，主要集中在内容上  发展因素及趋势概况
 利好政策的扶持 中国文娱行业进入资本寒冬  从数据上看，总投资金额在减少，投资项目数量也在减少   平均单笔融资金额快速上升  从数据上看，虽然总投资金额在减少，但是单笔投资金额在逐年上升 对于大IP等头部内容，备受青睐   战略投资和并购占比高  意味着更多的投资公司不愿意再冒风险去投资小IP  但对于互联网企业除外  资金足够多 为了自家整体生态布局     战略投资和并购的提高，意味着头部项目更吃香  容易造成文娱领域的马太效应     从全国城市文娱行业的融资数据来看，北京成为文娱行业投融资的主战场 媒体、游戏成为投资热门  从数据看，两者占比最大   CVC机构活跃  CVC  CVC是一种创新的投资组织形式，指的是企业通过其设立专业的投资机构，或战略投资部门对外进行直接投资，起源于20世纪60年代的美国   2019年投资项目数量TOP10中，有7家CVC  基本都是互联网企业     文娱类独角兽估值高  虽然数量少，但是足够吸金 诸如笑果文化等新文娱企业的崛起   大量的融资并购  融资大多涵盖互联网企业 并购方基本为传统文娱企业    原文链接</description>
    </item>
    
    <item>
      <title>LeetCode[181] Employees Earning More Than Their Managers</title>
      <link>https://www.marshalgao.com/leetcode181-employees-earning-more-than-their-managers/</link>
      <pubDate>Mon, 11 Jan 2021 12:14:21 +0800</pubDate>
      
      <guid>https://www.marshalgao.com/leetcode181-employees-earning-more-than-their-managers/</guid>
      <description>Question The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.
+----+-------+--------+-----------+ | Id | Name | Salary | ManagerId | +----+-------+--------+-----------+ | 1 | Joe | 70000 | 3 | | 2 | Henry | 80000 | 4 | | 3 | Sam | 60000 | NULL | | 4 | Max | 90000 | NULL | +----+-------+--------+-----------+  Given the Employee table, write a SQL query that finds out employees who earn more than their managers.</description>
    </item>
    
    <item>
      <title>LeetCode[180] Consecutive Numbers</title>
      <link>https://www.marshalgao.com/leetcode180-consecutive-numbers/</link>
      <pubDate>Mon, 11 Jan 2021 11:20:40 +0800</pubDate>
      
      <guid>https://www.marshalgao.com/leetcode180-consecutive-numbers/</guid>
      <description>Question Table: Logs
+-------------+---------+ | Column Name | Type | +-------------+---------+ | id | int | | num | varchar | +-------------+---------+ id is the primary key for this table.  Write an SQL query to find all numbers that appear at least three times consecutively.
Return the result table in any order.
The query result format is in the following example:
Logs table: +----+-----+ | Id | Num | +----+-----+ | 1 | 1 | | 2 | 1 | | 3 | 1 | | 4 | 2 | | 5 | 1 | | 6 | 2 | | 7 | 2 | +----+-----+ Result table: +-----------------+ | ConsecutiveNums | +-----------------+ | 1 | +-----------------+ 1 is the only number that appears consecutively for at least three times.</description>
    </item>
    
    <item>
      <title>Content Products</title>
      <link>https://www.marshalgao.com/content-products/</link>
      <pubDate>Sat, 09 Jan 2021 22:33:41 +0800</pubDate>
      
      <guid>https://www.marshalgao.com/content-products/</guid>
      <description>内容型产品
 定义  通过内容聚集用户，形成流量平台 用户主要是进行内容消费，消磨时间   举例  新闻资讯类：网易新闻、今日头条、微信公众号 社交类：微博、知乎、豆瓣 内容电商类：什么值得买、小红书 影音娱乐类：腾讯视频、QQ音乐   内容的生产方式  分发型（PGC）  产品模式  以媒体资讯类为主，例如：今日头条 平台签约创作者，吸引内容消费者，实现流量平台搭建 头部MCN会优先推荐 流量积累速度快，起步快 关系沉淀弱，创作者对观众的单向关系，观众难以转化为创作者 除了解决内容增长之外，还需要增加用户、内容以及用户之间的互动（社交属性）-&amp;gt; 提升用户粘性   业务划分（以新闻资讯类为例）  推荐分发  通过订阅、个性化推荐将内容分发给用户   跟帖互动  社交属性，增强用户粘性   内容后台  自媒体管理，审核与质量评级，建立内容库的基础   用户增长  拉新和留存   商业变现  广告、知识付费     变现模式  创作者变现  平台补贴刺激生产内容 知识付费收入分成 流量主收入 沉淀粉丝其他渠道变现   平台变现  广告变现  例如：今日头条、网易新闻   内容IP-知识付费  订阅付费：先付费再消费，例如：得到 打赏付费：先消费再付费，例如：微信公众号   购买会员  满足用户跳过广告的需求，例如：腾讯视频          社区型（UGC）  产品模式  通过内容聚集相同兴趣或调性的用户，以引导用户创作内容为主导，通过内容发现人，强调关系链的搭建与互动，以及社区内容的调性维护，例如：抖音，小红书 社区中，用户群体关系通常呈现为金字塔结构  大V和KOL 腰部中小V 尝鲜小白和社区普通用户    UGC产品起步如果采取单纯UGC的模式会产生大量的“内容噪音”，因此一般来说会先从头部KOL开始产生内容进行输出（个人理解是PGC的方式），后期发展需要打造社区氛围 UGC与PGC相比，天花板更高，迁移成本提高，用户留存高（因为社区的形成）   业务划分  发布工具  降低内容创作门槛，提高创作趣味性   KOL扶植  提升KOL的on boarding体验   互动关系  打造关系链，创建社区   内容分发  通过内容聚集相同属性的用户   用户增长  新增和留存   商业变现  广告、电商      变现模式  创作者变现  平台补贴刺激生产内容 沉淀粉丝其他渠道转化变现 带货收入分成   平台变现  电商  自建电商，例如：小红书 导流电商，例如：抖音   广告变现  与PGC的广告模式类似，例如：知乎的信息流广告            快速设计内容发现</description>
    </item>
    
    <item>
      <title>LeetCode[178] Rank Scores</title>
      <link>https://www.marshalgao.com/leetcode178-rank-scores/</link>
      <pubDate>Sat, 09 Jan 2021 16:18:31 +0800</pubDate>
      
      <guid>https://www.marshalgao.com/leetcode178-rank-scores/</guid>
      <description>Question Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no &amp;ldquo;holes&amp;rdquo; between ranks.
+----+-------+ | Id | Score | +----+-------+ | 1 | 3.50 | | 2 | 3.65 | | 3 | 4.00 | | 4 | 3.</description>
    </item>
    
    <item>
      <title>LeetCode[177] Nth Highest Salary</title>
      <link>https://www.marshalgao.com/leetcode177-nth-highest-salary/</link>
      <pubDate>Sat, 09 Jan 2021 16:06:13 +0800</pubDate>
      
      <guid>https://www.marshalgao.com/leetcode177-nth-highest-salary/</guid>
      <description>Question Write a SQL query to get the nth highest salary from the Employee table.
+----+--------+ | Id | Salary | +----+--------+ | 1 | 100 | | 2 | 200 | | 3 | 300 | +----+--------+  For example, given the above Employee table, the nth highest salary where n = 2 is 200. If there is no nth highest salary, then the query should return null.
+------------------------+ | getNthHighestSalary(2) | +------------------------+ | 200 | +------------------------+  My Interesting Code CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT BEGIN set N = N - 1; RETURN ( select distinct Salary as getNthHighestSalary from Employee order by Salary desc limit N, 1 ); END My Perspective For this question, firstly, you can order the salary.</description>
    </item>
    
    <item>
      <title>The Needs and Development of Internet Advertising</title>
      <link>https://www.marshalgao.com/the-needs-and-development-of-internet-advertising/</link>
      <pubDate>Fri, 08 Jan 2021 17:35:12 +0800</pubDate>
      
      <guid>https://www.marshalgao.com/the-needs-and-development-of-internet-advertising/</guid>
      <description>纵观互联网广告行业的发展历程
 门户时代互联网广告（广告主仍然偏爱传统流量） 搜索广告的出现 （比如谷歌、百度、阿里妈妈） 信息流广告的革命性改变（比如Facebook，今日头条，腾讯社交广告）  以广告主、媒体方的发展及需求为主线，理解行业的发展变化
 持续面临的问题  广告主  更愿意为效果付费，而非展现 期望更精准地获得流量 不知怎么更好地做投放决策   媒体方  大媒体及小媒体都希望尽可能卖出更多流量 媒体需要提高单个流量的变现效率 媒体期望降低链条的交易成本     基于面临问题进行的行业转变  由仅支持按曝光计费变为可选择按效果计费  早期以CPT、CPM等曝光类方式计费 搜索引擎率先推出了按点击付费的方式  平衡广告主和媒体的利益 媒体侧重给广告更多有效的点击 广告主负责将点击转化   按转化计费方式的出现（由于落地页由媒体方提供和负责，其很难监控转化数据、优化转化效率，所以推出这种计费方式的媒体不多）  填写表单 下单 下载等     由粗糙的定向投放变为精细化定向投放  人物画像的出现 定向采买的实现 DMP对数据的高度整合，使广告被投向不同的媒体平台 近些年，也会通过广告与用户的互动来实现召回，减少不必要的曝光   小媒体由不能获益变为能获得广告收益  早期卖的流量比较粗，只有大的媒体和核心广告位比较抢手 越来越多的小媒体拥有小流量，单看流量自身，其对广告主是十分有价值的 整合大小媒体，出现了广告联盟  大媒体可以正常获客 小媒体可以售卖自身流量 广告主可以获得更多的有效流量，且没有增加成本     由提前锁定部分媒体的流量资源，变为实时竞价多个媒体的流量资源  互联网广告早期的交易方式是广告主提前出价，与媒体约定采买的量，媒体预留展示机会给广告主  对于广告主，他们期望在媒体选择、预算分配及出价方案上有一定的灵活性，也期望能降低决策成本、同时让购买的流量尽可能多地有价值 对于媒体方，这种方式容易让其错失一些更愿意出高价的潜在客户，也容易在流量波动的情况下不能灵活调整售卖策略，同时中小媒体在前述方式下也难获得交易机会   实时竞价的出现  将每个流量视作独立的售卖单位 可以单独售卖、多人竞价、实时交易 实现方式  DSP、SSP、ADX、DMP的结合 SSP是为媒体方服务的，负责和ADX对接，接入SSP的媒体，在广告位有单个流量到来时，可发起广告请求，向ADX询问是否有合适的广告可展现 ADX是为DSP和SSP服务的，起到衔接、匹配的作用，它接收到SSP的请求后，将广告流量信息传递给DSP，询问它们的出价，DSP响应后返回相应的广告创意及出价 DSP是为广告主服务的，负责和ADX对接，若干广告主将预算、创意、出价、流量要求等提交给DSP，DSP负责具体投放决策 DMP提供数据服务，帮助广告主更准确地了解每个流量，帮助其决策       由按流量统一出价变为按流量差异化出价  主要针对的是点击计费的场景 按照传统的点击计费逻辑，广告主为每个点击付出的成本大体是相近的 追求效果的广告主通常按下载、填写表单等实际转化来核算成本 由于每个点击的实际转化率波动大、再加上客户在短时间获得的点击量较小，这就导致按上述计费方式换算的转化成本不稳定，客户的成本和预算不太可控，安全感较低 由于出价是固定的，对于那些转化率更高的流量，客户没办法在控制总预算的前提下临时调整出价以竞争到展现广告的机会 oCPC的诞生  客户设定转化出价（例如一个下载平均20元），对于每一个流量，系统可根据预估的转化率调整点击出价，使转化成本相对稳定 按照这个逻辑，系统可对预估转化率高的流量提高出价，预估转化率低流量降低出价        </description>
    </item>
    
    <item>
      <title>LeetCode[176] Second Highest Salary</title>
      <link>https://www.marshalgao.com/leetcode176-second-highest-salary/</link>
      <pubDate>Fri, 08 Jan 2021 16:37:07 +0800</pubDate>
      
      <guid>https://www.marshalgao.com/leetcode176-second-highest-salary/</guid>
      <description>Question Write a SQL query to get the second highest salary from the Employee table.
+----+--------+ | Id | Salary | +----+--------+ | 1 | 100 | | 2 | 200 | | 3 | 300 | +----+--------+  For example, given the above Employee table, the query should return 200 as the second highest salary. If there is no second highest salary, then the query should return null.
+---------------------+ | SecondHighestSalary | +---------------------+ | 200 | +---------------------+  SQL Schema Create table If Not Exists Employee (Id int, Salary int) Truncate table Employee insert into Employee (Id, Salary) values (&amp;#39;1&amp;#39;, &amp;#39;100&amp;#39;) insert into Employee (Id, Salary) values (&amp;#39;2&amp;#39;, &amp;#39;200&amp;#39;) insert into Employee (Id, Salary) values (&amp;#39;3&amp;#39;, &amp;#39;300&amp;#39;) My Interesting Code select max(Salary) as SecondHighestSalary from Employee where Salary &amp;lt; (select max(Salary) from Employee) My Perspective This question is also simple.</description>
    </item>
    
    <item>
      <title>LeetCode[175] Combine Two Tables</title>
      <link>https://www.marshalgao.com/leetcode175-combine-two-tables/</link>
      <pubDate>Fri, 08 Jan 2021 16:21:38 +0800</pubDate>
      
      <guid>https://www.marshalgao.com/leetcode175-combine-two-tables/</guid>
      <description>Question Table: Person
+-------------+---------+ | Column Name | Type | +-------------+---------+ | AddressId | int | | PersonId | int | | City | varchar | | State | varchar | +-------------+---------+ PersonId is the primary key column for this table.  Table: Address
+-------------+---------+ | Column Name | Type | +-------------+---------+ | AddressId | int | | PersonId | int | | City | varchar | | State | varchar | +-------------+---------+ AddressId is the primary key column for this table.</description>
    </item>
    
  </channel>
</rss>
